[  {    "type": "post",    "url": "/badge_actions",    "title": "Create a badge action.",    "name": "CreateBadgeAction",    "group": "Badges",    "description": "<p>This creates a badge action. A badge action is a record of something done of a particular action type in the app. Badge actions are earned toward unearned badges of the action type matching the badge action. This call returns either an array of earned badges or an object called pending_badge with the points earned so far and the badge info. If more than one badge has been partially earned, the badge with the highest percentage earned is returned.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "badge_action",            "description": "<p>The badge_action object container.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "badge_action.action_type",            "description": "<p>The internal name of the badge action.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "badge_action.identifier",            "description": "<p>The identifier for this badge action.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\nbadges_awarded: { [badge json], [badge_json],...} OR\npending_badge: { //NULL if there are no pending badges\n    badge_action_count: 1,\n    badge: [ badge json]\n}",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 422\n\"errors\" :\n  { \"Action type invalid, cannot do that action again, blah blah blah\" }\nHTTP/1.1 429 - Not enough time since last submission of this action type\n      or duplicate action type, person, identifier combination",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/badge_actions_controller.rb",    "groupTitle": "Badges"  },  {    "type": "get",    "url": "/badges",    "title": "Get badges for a passed in user.",    "name": "GetBadges",    "group": "Badges",    "description": "<p>This gets a list of all badges earned for a passed in user. Will include points earned towards each badge and whether badge has been awarded to the user.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Integer",            "optional": false,            "field": "person_id",            "description": "<p>The id of the person whose badges you want.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"pending_badges\": [\n  {\n    badge_action_count: 1,\n    badge_awarded: false,\n    badge: {\n      \"id\": 123,\n      \"name\": \"Sheriff\",\n      \"internal_name\": \"sheriff\",\n      \"description\": \"You get this badge for just existing, in true millennial fashion\",\n      \"picture_url\": \"http://example.com/images/14,\n      \"action_requirement\": 1,\n      \"point_value\": 5\n    }\n  },...\n]",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 Not Found, 422 Unprocessable, etc.",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/badges_controller.rb",    "groupTitle": "Badges"  },  {    "type": "post",    "url": "/blocks",    "title": "Block a person.",    "name": "CreateBlock",    "group": "Blocks",    "description": "<p>This is used to block a person. When a person is blocked, any followings and relationships are immediately removed between the users.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "block",            "description": "<p>Block object.</p>"          },          {            "group": "Parameter",            "type": "Integer",            "optional": false,            "field": "block.blocked_id",            "description": "<p>Person current user wants to block</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"block\": {\n  \"id\" : 123, #id of the block\n  \"blocker_id\" : 1,\n  \"blocked_id\" : 2\n}",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 422\n\"errors\" :\n  { \"You already blocked that person, blah blah blah\" }",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/blocks_controller.rb",    "groupTitle": "Blocks"  },  {    "type": "delete",    "url": "/blocks/:id",    "title": "Unblock a person.",    "name": "DeleteBlock",    "group": "Blocks",    "description": "<p>This is used to unblock a person.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Integer",            "optional": false,            "field": "id",            "description": "<p>id of the underlying block</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 if block not found",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/blocks_controller.rb",    "groupTitle": "Blocks"  },  {    "type": "get",    "url": "/events/:id",    "title": "Get a single event.",    "name": "GetEvent",    "group": "Events",    "description": "<p>This gets a single event for an event id.</p>",    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"event\": [\n  {\n    \"id\": \"5016\",\n    \"name\": \"Some event\",\n    \"description\": \"Some more about the event\"\n    \"starts_at\": \"2018-01-08T12:00:00Z\",\n    \"ends_at\":  \"2018-01-08T15:00:00Z\",\n    \"ticket_url\": \"https://example.com/3455455\",\n    \"place_identifier\": \"fdA3434Bdfad34134\"\n  },....\n]",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 Not Found",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/events_controller.rb",    "groupTitle": "Events"  },  {    "type": "get",    "url": "/events",    "title": "Get available events.",    "name": "GetEvents",    "group": "Events",    "description": "<p>This gets a list of events, in starts_at order.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "from_date",            "description": "<p>Only include events starting on or after date in format &quot;YYYY-MM-DD&quot;. Note valid dates start from 2017-01-01.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "to_date",            "description": "<p>Only include events starting on or before date in format &quot;YYYY-MM-DD&quot;. Note valid dates start from 2017-01-01.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"events\": [\n  { ....event json..see get single event action ....\n  },....\n]",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 401 Unauthorized",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/events_controller.rb",    "groupTitle": "Events"  },  {    "type": "post",    "url": "/followings",    "title": "Follow a person.",    "name": "CreateFollowing",    "group": "Following",    "description": "<p>This is used to follow a person.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Integer",            "optional": false,            "field": "followed_id",            "description": "<p>Person to follow</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"following\": {\n  \"id\" : 123, #id of the following\n  \"follower\" : { ...public json of the person following },\n  \"followed\" : { ...public json of the person followed }\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/followings_controller.rb",    "groupTitle": "Following"  },  {    "type": "delete",    "url": "/followings/:id",    "title": "Unfollow a person.",    "name": "DeleteFollowing",    "group": "Following",    "description": "<p>This is used to unfollow a person.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Integer",            "optional": false,            "field": "id",            "description": "<p>id of the underlying following</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/followings_controller.rb",    "groupTitle": "Following"  },  {    "type": "get",    "url": "/followings",    "title": "Get followers or followings of a user.",    "name": "GetFollowings",    "group": "Following",    "description": "<p>This is used to get a list of someone's followers or followed. If followed_id parameter is supplied, it will get the follower's of that user. If follower_id is supplied, it will get the people that person is following. If nothing is supplied, it will get the people the current user is following.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Integer",            "optional": false,            "field": "followed_id",            "description": "<p>Person to who's followers to get</p>"          },          {            "group": "Parameter",            "type": "Integer",            "optional": false,            "field": "follower_id",            "description": "<p>Id of person who is following the people in the list we are getting.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "  HTTP/1.1 200 Ok\n\"followers [or following]\" {\n  [ ... person json of follower/followed....],\n  ....\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/followings_controller.rb",    "groupTitle": "Following"  },  {    "type": "get",    "url": "/levels",    "title": "Get all available levels.",    "name": "GetLevels",    "group": "Level",    "description": "<p>This gets a list of all levels available to be obtained.</p>",    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"levels\": [\n  {\n    \"id\": \"123\"\n    \"name\": \"Level One\",\n    \"internal_name\": \"level_one\",\n    \"description\": \"some level translated to current language\",\n    \"points\": 10,\n    \"picture_url\": \"http://example.com/images/14\"\n  },...\n]",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 Not Found, 422 Unprocessable, etc.",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/levels_controller.rb",    "groupTitle": "Level"  },  {    "type": "get",    "url": "/merchandise",    "title": "Get available merchandise.",    "name": "GetMerchandise",    "group": "Merchandise",    "description": "<p>This gets a list of merchandise, in priority order.</p>",    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"merchandise\": [\n  { ....merchandise json..see get single merchandise action ....\n  },....\n]",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 401 Unauthorized",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/merchandise_controller.rb",    "groupTitle": "Merchandise"  },  {    "type": "get",    "url": "/merchandise/:id",    "title": "Get a single piece of merchandise.",    "name": "GetMerchandise",    "group": "Merchandise",    "description": "<p>This gets a single piece of merchandise for a merchandise id.</p>",    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"merchandise\": [\n  {\n    \"id\": \"5016\",\n    \"name\": \"Something well worth the money\",\n    \"description\": \"Bigger than a breadbox\"\n    \"price\": \"$4.99\",\n    \"purchase_url\": \"https://amazon.com/3455455\",\n    \"picture_url\": \"https://example.com/hot.jpg\"\n  },....\n]",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 Not Found",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/merchandise_controller.rb",    "groupTitle": "Merchandise"  },  {    "type": "post",    "url": "/rooms/{room_id}/messages",    "title": "Create a message in a room.",    "name": "CreateMessage",    "group": "Messages",    "description": "<p>This creates a message in a room and posts it to Firebase as appropriate.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "message",            "description": "<p>The message object container for the message parameters.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "message.body",            "description": "<p>The body of the message.</p>"          },          {            "group": "Parameter",            "type": "Attachment",            "optional": true,            "field": "message.picture",            "description": "<p>Message picture, this should be <code>image/gif</code>, <code>image/png</code>, or <code>image/jpeg</code>.</p>"          },          {            "group": "Parameter",            "type": "Array",            "optional": true,            "field": "mentions",            "description": "<p>Array of mentions each consisting of required person_id (integer) and required linked_text (string)</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\nmessage: { ..message json..see get message action ....}",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 422\n\"errors\" :\n  { \"Body is required, blah blah blah\" }",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/messages_controller.rb",    "groupTitle": "Messages"  },  {    "type": "post",    "url": "/rooms/:room_id/message_reports",    "title": "Report a message in a public room.",    "name": "CreateMessageReport",    "group": "Messages",    "description": "<p>This reports a message that was posted to a public room.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "room_id",            "optional": false,            "field": "room_id",            "description": "<p>Id of the room in which the message was created.</p>"          },          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "message_report",            "description": "<p>The message report object container.</p>"          },          {            "group": "Parameter",            "type": "Integer",            "optional": false,            "field": "message_report.message_id",            "description": "<p>The id of the message being reported.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "message_report.reason",            "description": "<p>The reason given by the user for reporting the message.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 422\n\"errors\" :\n  { \"I don't like your reason, etc.\" }",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/message_reports_controller.rb",    "groupTitle": "Messages"  },  {    "type": "delete",    "url": "/rooms/{room_id}/messages/id",    "title": "Delete (hide) a single message.",    "name": "DeleteMessage",    "group": "Messages",    "description": "<p>This deletes a single message by marking as hidden. Can only be called by the creator.</p>",    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 Not Found, 401 Unauthorized, etc.",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/messages_controller.rb",    "groupTitle": "Messages"  },  {    "type": "get",    "url": "/rooms/{room_id}/messages/id",    "title": "Get a single message.",    "name": "GetMessage",    "group": "Messages",    "description": "<p>This gets a single message for a message id. Only works for messages in private rooms. If the message author has been blocked by the current user, this will return 404 Not Found.</p>",    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"message\":\n  {\n    \"id\": \"5016\",\n    \"body\": \"Stupid thing to say\",\n    \"created_time\": \"2018-01-08T12:13:42Z\"\n    \"picture_url\": \"http://host.name/path\",\n    \"person\": {...public person json with relationships...}\n  }",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 Not Found",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/messages_controller.rb",    "groupTitle": "Messages"  },  {    "type": "get",    "url": "/message_reports",    "title": "Get list of messages reports (ADMIN).",    "name": "GetMessageReports",    "group": "Messages",    "description": "<p>This gets a list of message reports with optional filter.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "status_filter",            "description": "<p>If provided, valid values are &quot;message_hidden&quot;, &quot;no_action_needed&quot;, and &quot;pending&quot;</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"message_reports\": [\n  {\n    \"id\": \"1234\",\n    \"created_at\": \"2018-01-08'T'12:13:42'Z\",\n    \"updated_at\": \"2018-01-08'T'12:13:42'Z\",\n    \"message_id\": 1234,\n    \"poster\": \"message_username\",\n    \"reporter\": \"message_report_username\",\n    \"reason\": \"I don't like your message\",\n    \"status\": \"pending\"\n  },....\n]",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 Not Found, 422 Unprocessable, etc.",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/message_reports_controller.rb",    "groupTitle": "Messages"  },  {    "type": "get",    "url": "/rooms/{room_id}/messages",    "title": "Get messages.",    "name": "GetMessages",    "group": "Messages",    "version": "2.0.0",    "description": "<p>This gets a list of messages for a page number and a per page parameter.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Integer",            "optional": false,            "field": "page",            "description": "<p>Page number to get.</p>"          },          {            "group": "Parameter",            "type": "Integer",            "optional": true,            "field": "per_page",            "description": "<p>Number of messages in a page. Default is 25.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "pinned",            "description": "<p>&quot;Yes&quot; to provide only pinned messages, &quot;No&quot; to provide only non-pinned messages. &quot;All&quot; (default) for all regardless of pinned status.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"messages\": [\n  { ....message json..see get message action ....\n  },....\n]",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 Not Found, 422 Unprocessable, etc.",          "type": "json"        }      ]    },    "filename": "app/controllers/api/v2/messages_controller.rb",    "groupTitle": "Messages"  },  {    "type": "get",    "url": "/rooms/{room_id}/messages",    "title": "Get messages.",    "name": "GetMessages",    "group": "Messages",    "version": "1.0.0",    "description": "<p>This gets a list of message for a from date, to date, with an optional limit. Messages are returned newest first, and the limit is applied to that ordering.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "from_date",            "description": "<p>From date in format &quot;YYYY-MM-DD&quot;. Note valid dates start from 2017-01-01.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "to_date",            "description": "<p>To date in format &quot;YYYY-MM-DD&quot;. Note valid dates start from 2017-01-01.</p>"          },          {            "group": "Parameter",            "type": "Integer",            "optional": true,            "field": "limit",            "description": "<p>Limit results to count of limit.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"messages\": [\n  { ....message json..see get message action ....\n  },....\n]",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 Not Found, 422 Unprocessable, etc.",          "type": "json"        }      ]    },    "filename": "app/controllers/api/v1/messages_controller.rb",    "groupTitle": "Messages"  },  {    "type": "get",    "url": "/messages",    "title": "Get a list of messages without regard to room (ADMIN ONLY).",    "name": "ListMessages",    "group": "Messages",    "description": "<p>This gets a list of messages without regard to room (with possible exception of room filter).</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Integer",            "optional": true,            "field": "id_filter",            "description": "<p>Full match on Message id.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "person_filter",            "description": "<p>Full or partial match on person username.</p>"          },          {            "group": "Parameter",            "type": "Integer",            "optional": true,            "field": "room_id_filter",            "description": "<p>Full match on Room id.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "body_filter",            "description": "<p>Full or partial match on message body.</p>"          },          {            "group": "Parameter",            "type": "Boolean",            "optional": true,            "field": "reported_filter",            "description": "<p>Filter on whether the message has been reported.</p>"          },          {            "group": "Parameter",            "type": "Integer",            "optional": true,            "field": "page",            "description": "<p>Page number. Default is 1.</p>"          },          {            "group": "Parameter",            "type": "Integer",            "optional": true,            "field": "per_page",            "description": "<p>Messages per page. Default is 25.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"messages\": [\n  {\n    \"id\": \"123\",\n    \"person_id\": 123,\n    \"room_id\": 123,\n    \"body\": \"Do you like my body?\",\n    \"hidden\": false,\n    \"picture_url\": \"http://example.com/pic.jpg\",\n    \"created_at\": \"2018-01-08'T'12:13:42'Z'\",\n    \"updated_at\": \"2018-01-08'T'12:13:42'Z'\"\n  },...\n]",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 401 Unautorized",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/messages_controller.rb",    "groupTitle": "Messages"  },  {    "type": "patch",    "url": "/messages/{id}",    "title": "Update a message",    "name": "UpdateMessage",    "group": "Messages",    "description": "<p>This updates a message in a room. Only the hidden field can be changed and only by an admin. If the item is hidden, Firebase will be updated to inform the app that the message has been hidden.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "message",            "description": "<p>The message object container for the message parameters.</p>"          },          {            "group": "Parameter",            "type": "Boolean",            "optional": false,            "field": "message.hidden",            "description": "<p>Whether or not the item is hidden.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\nmessage: { ..message json..see list messages action ....}",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 401, 404",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/messages_controller.rb",    "groupTitle": "Messages"  },  {    "type": "patch",    "url": "/message_reports/:id",    "title": "Update a Message Report. (Admin)",    "name": "UpdateMessageReport",    "group": "Messages",    "description": "<p>This updates a message report. The only value that can be changed is the status.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "id",            "optional": false,            "field": "id",            "description": "<p>URL parameter. id of the message report you want to update.</p>"          },          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "message_report",            "description": "<p>The message report object container.</p>"          },          {            "group": "Parameter",            "type": "status",            "optional": false,            "field": "message_report.status",            "description": "<p>The new status. Valid statuses are &quot;message_hidden&quot;, &quot;no_action_needed&quot;, and &quot;pending&quot;.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 422\n\"errors\" :\n  { \"Invalid or missing status.\" }",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/message_reports_controller.rb",    "groupTitle": "Messages"  },  {    "type": "patch",    "url": "/people/:id/change_password",    "title": "Change your password.",    "name": "ChangePassword",    "group": "People",    "description": "<p>This is used to change the logged in user's password.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "ObjectId",            "optional": false,            "field": "id",            "description": "<p>The person id.</p>"          },          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "person",            "description": "<p>The person's information.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "person.current_password",            "description": "<p>Current password.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "person.new_password",            "description": "<p>New password.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok or 422",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/people_controller.rb",    "groupTitle": "People"  },  {    "type": "post",    "url": "/notification_device_ids",    "title": "Add a new device id for a person.",    "name": "CreateNotificationDeviceId",    "group": "People",    "description": "<p>This adds a new device id to be used for notifications to the Firebase Cloud Messaging Service. A user can have any number of device ids.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "device_id",            "description": ""          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 422\n\"errors\" :\n  { \"Device ID already registered\" }",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/notification_device_ids_controller.rb",    "groupTitle": "People"  },  {    "type": "post",    "url": "/people/password_forgot",    "title": "Initiate a password reset.",    "name": "CreatePasswordReset",    "group": "People",    "description": "<p>This is used to initiate a password reset. Product and email or username required. If email or username is not found, password reset will fail silently.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "product",            "description": "<p>Internal name of product</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "email_or_username",            "description": "<p>The person's email or username.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"message\": {\n  \"Reset password instructions have been sent to your email, if it exists in our system\"\n}, or\nHTTP/1.1 422 Unprocessable\n\"errors\": { //if product not found\n  \"Required parameter missing.\"\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/password_resets_controller.rb",    "groupTitle": "People"  },  {    "type": "post",    "url": "/people",    "title": "Create person.",    "name": "CreatePerson",    "group": "People",    "description": "<p>This is used to create a new person.</p> <p>If they account creation is successful, they will be logged in and we will send an onboarding email (if we have an email address for them).</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "product",            "description": "<p>Internal name of product</p>"          },          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "person",            "description": "<p>The person's information.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "person.email",            "description": "<p>Email address (required unless using FB auth token).</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "facebook_auth_token",            "description": "<p>Auth token from Facebook</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "person.name",            "description": "<p>Name.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "person.username",            "description": "<p>Username. This needs to be unique within product scope.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "person.password",            "description": "<p>Password.</p>"          },          {            "group": "Parameter",            "type": "Attachment",            "optional": true,            "field": "person.picture",            "description": "<p>Profile picture, this should be <code>image/gif</code>, <code>image/png</code>, or <code>image/jpeg</code>.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "person.gender",            "description": "<p>Gender. Valid options: unspecified (default), male, female</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "person.birthdate",            "description": "<p>Birth dateTo date in format &quot;YYYY-MM-DD&quot;.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "person.city",            "description": "<p>Person's supplied city.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "person.country_code",            "description": "<p>Alpha2 code (two letters) from ISO 3166 list.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"person\": { // The full private version of the person (person json with email).\n  ....see show action for person json...,\n  \"email\" : \"foo@example.com\"\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/people_controller.rb",    "groupTitle": "People"  },  {    "type": "delete",    "url": "/notification_device_ids",    "title": "Delete a device id",    "name": "DeleteNotificationDeviceId",    "group": "People",    "description": "<p>This deletes a single device id. Can only be called by the owner.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "device_id",            "description": ""          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 Not Found",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/notification_device_ids_controller.rb",    "groupTitle": "People"  },  {    "type": "get",    "url": "/people",    "title": "Get a list of people.",    "name": "GetPeople",    "group": "People",    "description": "<p>This is used to get a list of people.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Integer",            "optional": true,            "field": "page",            "description": "<p>Page number to get. Default is 1.</p>"          },          {            "group": "Parameter",            "type": "Integer",            "optional": true,            "field": "per_page",            "description": "<p>Page division. Default is 25.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "username_filter",            "description": "<p>A username or username fragment to filter on.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "email_filter",            "description": "<p>An email or email fragment to filter on.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"people\": [\n    {...see show action for person json....},....\n ]",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/people_controller.rb",    "groupTitle": "People"  },  {    "type": "get",    "url": "/people/:id",    "title": "Get a person.",    "name": "GetPerson",    "group": "People",    "description": "<p>This is used to get a person.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "ObjectId",            "optional": false,            "field": "id",            "description": "<p>The id of the person you want.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"person\": {\n  \"id\": \"5016\",\n  \"username\": \"Pancakes.McGee\",\n  \"name\": \"Pancakes McGee\",\n  \"picture_url\": \"http://host.name/path\",\n  \"product_account\": false,\n  \"recommended\": false,\n  \"chat_banned\": false,\n  \"designation\": \"Grand Poobah\",\n  \"following_id\": 12, //or null\n  \"relationships\": [ {json for each relationship}], //only present if relationships present\n  \"badge_points\": 0,\n  \"role\": \"normal\",\n  \"level\": {...level json...}, //or null,\n  \"do_not_message_me\": false,\n  \"pin_messages_from\": false,\n  \"auto_follow\": false,\n  \"facebookid\": 'fadfasdfa',\n  \"facebook_picture_url\": \"facebook.com/zuck_you.jpg\"\n  \"created_at\": \"2018-03-12T18:55:30Z\",\n  \"updated_at\": \"2018-03-12T18:55:30Z\"\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/people_controller.rb",    "groupTitle": "People"  },  {    "type": "get",    "url": "/people/recommended",    "title": "Get recommended people.",    "name": "GetRecommendedPeople",    "group": "People",    "description": "<p>This is used to get a list of people flagged as 'recommended'. It excludes the current user and anyone the current user is following.</p>",    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "  HTTP/1.1 200 Ok\n\"recommended_people\" {\n  [ ... person json ...],\n  ....\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/recommended_people_controller.rb",    "groupTitle": "People"  },  {    "type": "post",    "url": "/people/password_reset",    "title": "Completes a password reset.",    "name": "UpdatePasswordReset",    "group": "People",    "description": "<p>This is used to complete a password reset. It takes a form submitted from fan.link</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "token",            "description": "<p>Token from email link</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "password",            "description": "<p>The new password.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok; or\nHTTP/1.1 422 Unprocessable\n\"errors\": { //if token/person not found or password bad\n  \"...be better blah blah....\"\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/password_resets_controller.rb",    "groupTitle": "People"  },  {    "type": "put | patch",    "url": "/people/:id",    "title": "Update person.",    "name": "UpdatePerson",    "group": "People",    "description": "<p>This is used to update a person. Anything not mentioned is left alone.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "ObjectId",            "optional": false,            "field": "id",            "description": "<p>The person id.</p>"          },          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "person",            "description": "<p>The person's information.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "person.email",            "description": "<p>Email address.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "person.name",            "description": "<p>Full name.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "person.username",            "description": "<p>Username. This needs to be unique.</p>"          },          {            "group": "Parameter",            "type": "Attachment",            "optional": true,            "field": "person.picture",            "description": "<p>Profile picture, this should be <code>image/gif</code>, <code>image/png</code>, or <code>image/jpeg</code>.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "person.gender",            "description": "<p>Gender. Valid options: unspecified (default), male, female</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "person.birthdate",            "description": "<p>Birth dateTo date in format &quot;YYYY-MM-DD&quot;.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "person.city",            "description": "<p>Person's supplied city.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "person.country_code",            "description": "<p>Alpha2 code (two letters) from ISO 3166 list.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"person\": { // The full private version of the person.\n  ...see create action....\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/people_controller.rb",    "groupTitle": "People"  },  {    "type": "post",    "url": "/posts",    "title": "Create a post.",    "name": "CreatePost",    "group": "Posts",    "version": "1.0.0",    "description": "<p>This creates a post and puts in on the feed of the author's followers.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "post",            "description": "<p>The post object container for the post parameters.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "post.body",            "description": "<p>The body of the message.</p>"          },          {            "group": "Parameter",            "type": "Attachment",            "optional": true,            "field": "post.picture",            "description": "<p>Post picture, this should be <code>image/gif</code>, <code>image/png</code>, or <code>image/jpeg</code>.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\npost: { ..post json..see get post action ....}",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 422\n\"errors\" :\n  { \"Body is required, blah blah blah\" }",          "type": "json"        }      ]    },    "filename": "app/controllers/api/v1/posts_controller.rb",    "groupTitle": "Posts"  },  {    "type": "post",    "url": "/posts/:id/comments",    "title": "Create a comment on a post.",    "name": "CreatePostComment",    "group": "Posts",    "version": "1.0.0",    "description": "<p>This creates a post comment. It is automatically attributed to the logged in user.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "post_comment",            "description": "<p>The post_comment object container for the post_comment parameters.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "post_comment.body",            "description": "<p>The body of the comment.</p>"          },          {            "group": "Parameter",            "type": "Array",            "optional": true,            "field": "mentions",            "description": "<p>Mentions in the comment.</p>"          },          {            "group": "Parameter",            "type": "Integer",            "optional": false,            "field": "mention.person_id",            "description": "<p>The id of the person mentioned.</p>"          },          {            "group": "Parameter",            "type": "Integer",            "optional": false,            "field": "mention.location",            "description": "<p>Where the mention text starts in the comment.</p>"          },          {            "group": "Parameter",            "type": "Integer",            "optional": false,            "field": "mention.length",            "description": "<p>The length of the mention text.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\npost_comment: {\n  \"id\": 1234,\n  \"body\": \"Do you like my body?\",\n  \"mentions\": [\n  {\n    \"person_id\": 1234,\n    \"location\": 1,\n    \"length\": 1\n  }, ....\n  ]\n}",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 422\n\"errors\" :\n  { \"Body is required, blah blah blah\" }",          "type": "json"        }      ]    },    "filename": "app/controllers/api/v1/post_comments_controller.rb",    "groupTitle": "Posts"  },  {    "type": "post",    "url": "/posts/:post_id/reactions",    "title": "React to a post.",    "name": "CreatePostReaction",    "group": "Posts",    "description": "<p>This reacts to a post.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Integer",            "optional": false,            "field": "post_id",            "description": "<p>The id of the post to which you are reacting</p>"          },          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "post_reaction",            "description": "<p>The post reaction object container.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "post_reaction.reaction",            "description": "<p>The identifier for the reaction. Accepts stringified hex values between 0 and 10FFFF, inclusive.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "  HTTP/1.1 200 Ok\npost_reaction {\n  \"id\": \"1234\",\n  \"person_id\": 1234,\n  \"post_id\": 1234,\n  \"reaction\": \"1F601\"\n}",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 422\n\"errors\" :\n  { \"I don't like your reaction, etc.\" }",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/post_reactions_controller.rb",    "groupTitle": "Posts"  },  {    "type": "post",    "url": "/post_reports",    "title": "Report a post.",    "name": "CreatePostReport",    "group": "Posts",    "description": "<p>This reports a post that was posted to a feed.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "post_report",            "description": "<p>The post report object container.</p>"          },          {            "group": "Parameter",            "type": "Integer",            "optional": false,            "field": "post_report.post_id",            "description": "<p>The id of the post being reported.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "post_report.reason",            "description": "<p>The reason given by the user for reporting the post.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 422\n\"errors\" :\n  { \"I don't like your reason, etc.\" }",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/post_reports_controller.rb",    "groupTitle": "Posts"  },  {    "type": "delete",    "url": "/posts/:id",    "title": "Delete (hide) a single post.",    "name": "DeletePost",    "group": "Posts",    "version": "1.0.0",    "description": "<p>This deletes a single post by marking as deleted. Can only be called by the creator.</p>",    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 Not Found, 401 Unauthorized, etc.",          "type": "json"        }      ]    },    "filename": "app/controllers/api/v1/posts_controller.rb",    "groupTitle": "Posts"  },  {    "type": "delete",    "url": "/posts/:post_id/reactions/:id",    "title": "Delete a reaction to a post.",    "name": "DeletePostReaction",    "group": "Posts",    "description": "<p>This deletes a reaction to a post.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Integer",            "optional": false,            "field": "post_id",            "description": "<p>The id of the post to which you are reacting</p>"          },          {            "group": "Parameter",            "type": "Integer",            "optional": false,            "field": "id",            "description": "<p>The id of the post reaction you are updating</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/post_reactions_controller.rb",    "groupTitle": "Posts"  },  {    "type": "get",    "url": "/posts/:id",    "title": "Get a single post.",    "name": "GetPost",    "group": "Posts",    "version": "1.0.0",    "description": "<p>This gets a single post for a post id.</p>",    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"post\": {\n  \"id\": \"1234\",\n  \"create_time\":\"2018-02-18T06:32:24Z\",\n  \"body\":\"post body\",\n  \"picture_url\": \"www.example.com/pic.jpg\",\n  \"person\": ....public person json...,\n  \"post_reaction_counts\":{\"1F389\":1},\n  \"post_reaction\":...see post reaction create json....(or null if current user has not reacted)\n  \"global\": false,\n  \"starts_at\":  \"2018-01-01T00:00:00Z\",\n  \"ends_at\":    \"2018-01-31T23:59:59Z\",\n  \"repost_interval\": 0,\n  \"status\": \"published\",\n  \"priority\": 0\n}",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 Not Found",          "type": "json"        }      ]    },    "filename": "app/controllers/api/v1/posts_controller.rb",    "groupTitle": "Posts"  },  {    "type": "get",    "url": "/posts/:id/comments",    "title": "Get the comments on a post.",    "name": "GetPostComments",    "group": "Posts",    "version": "1.0.0",    "description": "<p>This gets all the non-hidden comments on a post.</p>",    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"post_comments\": [\n  {\n    ...post comment json..see create action ...\n  }, ....\n]",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 Not Found, 422 Unprocessable, etc.",          "type": "json"        }      ]    },    "filename": "app/controllers/api/v1/post_comments_controller.rb",    "groupTitle": "Posts"  },  {    "type": "get",    "url": "/post_reports",    "title": "Get list of post reports (ADMIN).",    "name": "GetPostReports",    "group": "Posts",    "description": "<p>This gets a list of post reports with optional filter.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Integer",            "optional": true,            "field": "page",            "description": "<p>Page number to get. Default is 1.</p>"          },          {            "group": "Parameter",            "type": "Integer",            "optional": true,            "field": "per_page",            "description": "<p>Page division. Default is 25.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "status_filter",            "description": "<p>If provided, valid values are &quot;pending&quot;, &quot;no_action_needed&quot;, and &quot;post_hidden&quot;</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"post_reports\": [\n  {\n    \"id\": \"1234\",\n    \"created_at\": \"2018-01-08T12:13:42Z\",\n    \"post_id\": 1234,\n    \"poster\": \"post_username\",\n    \"reporter\": \"post_report_username\",\n    \"reason\": \"I don't like your post\",\n    \"status\": \"pending\"\n  },....\n]",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 Not Found, 422 Unprocessable, etc.",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/post_reports_controller.rb",    "groupTitle": "Posts"  },  {    "type": "get",    "url": "/posts",    "title": "Get paginated posts.",    "name": "GetPosts",    "group": "Posts",    "version": "2.0.0",    "description": "<p>This gets a list of posts for a page and an amount per page. Posts are returned newest first. Posts included are posts from the passed in person or, if none, the current user along with those of the users the current user is following.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Integer",            "optional": true,            "field": "person_id",            "description": "<p>The person whose posts to get. If not supplied, posts from current user plus those from people the current user is following will be returned.</p>"          },          {            "group": "Parameter",            "type": "Integer",            "optional": true,            "field": "page",            "description": "<p>Page number to get. Default is 1.</p>"          },          {            "group": "Parameter",            "type": "Integer",            "optional": true,            "field": "per_page",            "description": "<p>Number of posts in a page. Default is 25.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"posts\": [\n  { ....post json..see get post action ....\n  },....\n]",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 Not Found, 422 Unprocessable, etc.",          "type": "json"        }      ]    },    "filename": "app/controllers/api/v2/posts_controller.rb",    "groupTitle": "Posts"  },  {    "type": "get",    "url": "/posts",    "title": "Get posts for a date range.",    "name": "GetPosts",    "group": "Posts",    "version": "1.0.0",    "description": "<p>This gets a list of posts for a from date, to date, with an optional limit and person. Posts are returned newest first, and the limit is applied to that ordering. Posts included are posts from the passed in person or, if none, the current user along with those of the users the current user is following.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Integer",            "optional": true,            "field": "person_id",            "description": "<p>The person whose posts to get. If not supplied, posts from current user plus those from people the current user is following will be returned.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "from_date",            "description": "<p>From date in format &quot;YYYY-MM-DD&quot;. Note valid dates start from 2017-01-01.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "to_date",            "description": "<p>To date in format &quot;YYYY-MM-DD&quot;. Note valid dates start from 2017-01-01.</p>"          },          {            "group": "Parameter",            "type": "Integer",            "optional": true,            "field": "limit",            "description": "<p>Limit results to count of limit.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"posts\": [\n  { ....post json..see get post action ....\n  },....\n]",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 Not Found, 422 Unprocessable, etc.",          "type": "json"        }      ]    },    "filename": "app/controllers/api/v1/posts_controller.rb",    "groupTitle": "Posts"  },  {    "type": "get",    "url": "/posts/:id/share",    "title": "Get a single, shareable post.",    "name": "GetShareablePost",    "group": "Posts",    "version": "1.0.0",    "description": "<p>This gets a single post for a post id without authentication.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "product",            "description": "<p>Product internal name.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"post\": {\n    \"body\": \"Stupid thing to say\",\n    \"picture_url\": \"http://host.name/path\",\n    \"person\": {\n        \"username\": Tester McTestingson,\n        \"picture_url\": \"http://host.name/path\"\n     },\n}",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 Not Found",          "type": "json"        }      ]    },    "filename": "app/controllers/api/v1/posts_controller.rb",    "groupTitle": "Posts"  },  {    "type": "get",    "url": "/posts/list",    "title": "Get a list of posts (ADMIN ONLY).",    "name": "ListPosts",    "group": "Posts",    "version": "1.0.0",    "description": "<p>This gets a list of posts with optional filters and pagination.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Integer",            "optional": true,            "field": "page",            "description": "<p>The page number to get. Default is 1.</p>"          },          {            "group": "Parameter",            "type": "Integer",            "optional": true,            "field": "per_page",            "description": "<p>The pagination division. Default is 25.</p>"          },          {            "group": "Parameter",            "type": "Integer",            "optional": true,            "field": "person_id_filter",            "description": "<p>Full match on person id.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "person_filter",            "description": "<p>Full or partial match on person username or email.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "body_filter",            "description": "<p>Full or partial match on post body.</p>"          },          {            "group": "Parameter",            "type": "Datetime",            "optional": true,            "field": "posted_after_filter",            "description": "<p>Posted at or after timestamp. Format: &quot;2018-01-08'T'12:13:42'Z'&quot;</p>"          },          {            "group": "Parameter",            "type": "Datetime",            "optional": true,            "field": "posted_before_filter",            "description": "<p>Posted at or before timestamp. Format: &quot;2018-01-08'T'12:13:42'Z'&quot;</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "status_filter",            "description": "<p>Post status. Valid values: pending published deleted rejected errored</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"posts\": [\n  {\n    \"id\": \"123\",\n    \"person_id\": 123,\n    \"body\": \"Do you like my body?\",\n    \"picture_url\": \"http://example.com/pic.jpg\",\n    \"global\": false,\n    \"starts_at\":  \"2018-01-01T00:00:00Z\",\n    \"ends_at\":    \"2018-01-31T23:59:59Z\",\n    \"repost_interval\": 0,\n    \"status\": \"published\",\n    \"priority\": 0,\n    \"created_at\": \"2017-12-31T12:13:42Z\",\n    \"updated_at\": \"2017-12-31T12:13:42Z\"\n  },...\n]",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 401 Unauthorized",          "type": "json"        }      ]    },    "filename": "app/controllers/api/v1/posts_controller.rb",    "groupTitle": "Posts"  },  {    "type": "patch",    "url": "/posts/{id}",    "title": "Update a post (ADMIN)",    "name": "UpdatePost",    "group": "Posts",    "description": "<p>This updates a post.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "post",            "description": "<p>The post object container for the post parameters.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "post.body",            "description": "<p>The body of the post.</p>"          },          {            "group": "Parameter",            "type": "Attachment",            "optional": true,            "field": "post.picture",            "description": "<p>Post picture, this should be <code>image/gif</code>, <code>image/png</code>, or <code>image/jpeg</code>.</p>"          },          {            "group": "Parameter",            "type": "Boolean",            "optional": true,            "field": "post.global",            "description": "<p>Whether the post is global (seen by all users).</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "post.starts_at",            "description": "<p>When the post should start being visible (same format as in responses).</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "post.ends_at",            "description": "<p>When the post should stop being visible (same format as in responses).</p>"          },          {            "group": "Parameter",            "type": "Integer",            "optional": true,            "field": "post.repost_interval",            "description": "<p>How often this post should be republished.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "post.status",            "description": "<p>Valid values: &quot;pending&quot;, &quot;published&quot;, &quot;deleted&quot;, &quot;rejected&quot;</p>"          },          {            "group": "Parameter",            "type": "Integer",            "optional": true,            "field": "post.priority",            "description": "<p>Priority value for post.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\npost: { ..post json..see list posts action ....}",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 401, 404",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/posts_controller.rb",    "groupTitle": "Posts"  },  {    "type": "post",    "url": "/posts/:post_id/reactions/:id",    "title": "Update a reaction to a post.",    "name": "UpdatePostReaction",    "group": "Posts",    "description": "<p>This updates a reaction to a post.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Integer",            "optional": false,            "field": "post_id",            "description": "<p>The id of the post to which you are reacting</p>"          },          {            "group": "Parameter",            "type": "Integer",            "optional": false,            "field": "id",            "description": "<p>The id of the post reaction you are updating</p>"          },          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "post_reaction",            "description": "<p>The post reaction object container.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "post_reaction.reaction",            "description": "<p>The identifier for the reaction. Accepts stringified hex values between 0 and 10FFFF, inclusive.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "  HTTP/1.1 200 Ok\npost_reaction {\n  \"id\": \"1234\",\n  \"person_id\": 1234,\n  \"post_id\": 1234,\n  \"reaction\": \"1F601\"\n}",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 422\n\"errors\" :\n  { \"I don't like your new reaction either, etc.\" }",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/post_reactions_controller.rb",    "groupTitle": "Posts"  },  {    "type": "patch",    "url": "/post_reports/:id",    "title": "Update a Post Report.",    "name": "UpdatePostReport",    "group": "Posts",    "description": "<p>This updates a post report. The only value that can be changed is the status.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "id",            "optional": false,            "field": "id",            "description": "<p>URL parameter. id of the post report you want to update.</p>"          },          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "post_report",            "description": "<p>The post report object container.</p>"          },          {            "group": "Parameter",            "type": "status",            "optional": false,            "field": "post_report.status",            "description": "<p>The new status. Valid statuses are &quot;pending&quot;, &quot;no_action_needed&quot;, &quot;post_hidden&quot;</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 422\n\"errors\" :\n  { \"Invalid or missing status.\" }",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/post_reports_controller.rb",    "groupTitle": "Posts"  },  {    "type": "delete",    "url": "/relationships/:id",    "title": "Unfriend a person.",    "name": "DeleteRelationship",    "group": "Relationship",    "description": "<p>This is used to unfriend a person.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Integer",            "optional": false,            "field": "id",            "description": "<p>id of the underlying relationship</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/relationships_controller.rb",    "groupTitle": "Relationship"  },  {    "type": "post",    "url": "/relationships",    "title": "Send a friend request to a person.",    "name": "CreateRelationship",    "group": "Relationships",    "description": "<p>This is used to send a friend request to a person. If there is a block between the people, an error will be returned.</p> <p>If the person sending the request already has a pending request (or friendship) from the requested_to_id, then no additional records will be created. The original relationship will be changed to friended (if not already) and returned.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "relationship",            "description": "<p>Relationship object.</p>"          },          {            "group": "Parameter",            "type": "Integer",            "optional": false,            "field": "relationship.requested_to_id",            "description": "<p>Person for whom the request is intended</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"relationship\": {\n  \"id\" : 123, #id of the relationship\n  \"requested_by\" : { ...public json of the person requesting },\n  \"requested_to\" : { ...public json of the person requested }\n}",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 422\n\"errors\" :\n  { \"You already spammed that person, blah blah blah\" }",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/relationships_controller.rb",    "groupTitle": "Relationships"  },  {    "type": "get",    "url": "/relationships/:id",    "title": "Get a single relationship.",    "name": "GetRelationship",    "group": "Relationships",    "description": "<p>This gets a single relationship for a relationship id. Only available to a participating user.</p>",    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"relationship\": {\n    \"id\": \"5016\",\n    \"status\": \"requested\",\n    \"created_time\": \"2018-01-08'T'12:13:42'Z'\",\n    \"update_time\": \"2018-01-08'T'12:13:42'Z'\",\n    \"requested_by\": { ... public person json },\n    \"requested_to\": { ... public person json }\n }",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 Not Found",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/relationships_controller.rb",    "groupTitle": "Relationships"  },  {    "type": "get",    "url": "/relationships",    "title": "Get current relationships of a person.",    "name": "GetRelationships",    "group": "Relationships",    "description": "<p>This is used to get a list of someone's friends. If the person supplied is the logged in user, 'requested' status is included for requests TO the current user. Otherwise, only 'friended' status is included.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Integer",            "optional": true,            "field": "person_id",            "description": "<p>Person whose friends to get</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "  HTTP/1.1 200 Ok\n\"relationships\" {\n  [ ... relationship json ...],\n  ....\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/relationships_controller.rb",    "groupTitle": "Relationships"  },  {    "type": "patch",    "url": "/relationships",    "title": "Update a relationship.",    "name": "UpdateRelationship",    "group": "Relationships",    "description": "<p>This is used to accept, deny or unfriend a relationship (friend request).</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "relationship",            "description": "<p>Relationship object.</p>"          },          {            "group": "Parameter",            "type": "Integer",            "optional": false,            "field": "relationship.status",            "description": "<p>New status. Valid values are &quot;friended&quot;, &quot;denied&quot; or &quot;withdrawn&quot;. However each one is only valid in the state and/or from the person that you would expect (e.g. the relationship requester cannot update with &quot;friended&quot;).</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"relationship\": {\n  \"id\" : 123, #id of the relationship\n  \"status\": \"friended\"\n  \"create_time\": \"\"2018-01-08'T'12:13:42'Z'\"\"\n  \"updated_time\": \"\"2018-01-08'T'12:13:42'Z'\"\"\n  \"requested_by\" : { ...public json of the person requesting },\n  \"requested_to\" : { ...public json of the person requested }\n}",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 422\n\"errors\" :\n  { \"You can't friend your own request, blah blah blah\" }",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/relationships_controller.rb",    "groupTitle": "Relationships"  },  {    "type": "post",    "url": "/rooms",    "title": "Create a private room.",    "name": "CreateRoom",    "group": "Rooms",    "description": "<p>The creates a private room and makes it active.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "room",            "description": "<p>The room object container for the room parameters.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "room.name",            "description": "<p>The name of the room. Must be between 3 and 26 characters, inclusive.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "room.description",            "description": "<p>The description of the room.</p>"          },          {            "group": "Parameter",            "type": "Attachment",            "optional": true,            "field": "room.picture",            "description": "<p>NOT YET IMPLEMENTED</p>"          },          {            "group": "Parameter",            "type": "Array",            "optional": true,            "field": "room.member_ids",            "description": "<p>Ids of persons to add as members.  Users who are blocked by or who are blocking the current user will be silently excluded. You do not need to include the current user, who will be made a member automatically.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"room\":\n  {\n    \"id\": \"5016\",\n    \"name\": \"Motley People Only\",\n    \"description\": \"Room description\",\n    \"owned\": \"true\", # is current user the owner of room?\n    \"picture_url\": \"http://host.name/path\",\n    \"members\": [\n      {\n        ....person json...\n      },....\n    ]\n\n  }",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 422\n\"errors\" :\n  { \"That name is too short, blah blah blah\" }",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/rooms_controller.rb",    "groupTitle": "Rooms"  },  {    "type": "post",    "url": "/room/id/room_memberships",    "title": "Add a room member.",    "name": "CreateRoomMembership",    "group": "Rooms",    "description": "<p>This adds a person to a private room. On success (person added), just returns 200.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "person",            "description": "<p>The person object.</p>"          },          {            "group": "Parameter",            "type": "Integer",            "optional": false,            "field": "person.id",            "description": "<p>The id of the person.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 or 422 Unprocessable - Room not active (404), current user not room owner (404), person is unwanted or illigitimate (422), etc.",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/room_memberships_controller.rb",    "groupTitle": "Rooms"  },  {    "type": "delete",    "url": "/rooms/id",    "title": "Delete a private room.",    "name": "DeleteRoom",    "group": "Rooms",    "description": "<p>The deletes a private room. If it has no messages, it deletes it completely. Otherwise, it just changes the status to deleted.</p>",    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 401, 404",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/rooms_controller.rb",    "groupTitle": "Rooms"  },  {    "type": "get",    "url": "/rooms",    "title": "Get a list of rooms.",    "name": "GetRooms",    "group": "Rooms",    "description": "<p>This gets a list of active rooms (public or private, as specified by the &quot;private&quot; parameter).</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Boolean",            "optional": true,            "field": "private",            "description": "<p>Which type of room you want. With true you will get just active private rooms of which the current user is a member. With false (the default), you will get just all active public rooms.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"rooms\": [\n  {\n    ....see room json under create above ....\n  },...\n]",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 Not Found",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/rooms_controller.rb",    "groupTitle": "Rooms"  },  {    "type": "patch",    "url": "/rooms/id",    "title": "Update a private room (name).",    "name": "UpdateRoom",    "group": "Rooms",    "description": "<p>The updates a private room. Only the name can by updated, and only by the owner.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "room",            "description": "<p>The room object container for the room parameters.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "room.name",            "description": "<p>The name of the room. Must be between 3 and 26 characters, inclusive.</p>"          },          {            "group": "Parameter",            "type": "Attachment",            "optional": true,            "field": "room.picture",            "description": "<p>NOT YET IMPLEMENTED</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"room\":\n  {\n    ...see room json for create room...\n  }",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 422\n\"errors\" :\n  { \"That name is too short, blah blah blah\" }",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/rooms_controller.rb",    "groupTitle": "Rooms"  },  {    "type": "post",    "url": "/session",    "title": "Log someone in.",    "name": "CreateSession",    "group": "Sessions",    "description": "<p>This is used to log someone in.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "product",            "description": "<p>Internal name of product logging into.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "email_or_username",            "description": "<p>The person's email address or username. Required unless using Facebook ID.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "facebook_auth_token",            "description": "<p>The facebook auth token. Required unless using username/password.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "password",            "description": "<p>The person's password. Required unless using facebook_auth_token</p>"          },          {            "group": "Parameter",            "type": "Boolean",            "optional": true,            "field": "keep",            "description": "<p>NOT YET SUPPORTED True if you want to keep them signed in, otherwise this will be a non-persistent session.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"person\": {\n  \"email\": \"addr@example.com\",\n  ...see person get for the rest of the fields...\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/session_controller.rb",    "groupTitle": "Sessions"  },  {    "type": "delete",    "url": "/session",    "title": "Log someone out.",    "name": "DestroySession",    "group": "Sessions",    "description": "<p>This is used to log someone out.</p>",    "version": "0.0.0",    "filename": "app/controllers/api/v1/session_controller.rb",    "groupTitle": "Sessions"  },  {    "type": "get",    "url": "/session",    "title": "Check a session.",    "name": "GetSession",    "group": "Sessions",    "description": "<p>This is used to see if your current session is valid. We return the currently logged-in person if the session is still good and a 404 otherwise.</p>",    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"person\": {\n  \"id\": \"5016\",\n  \"email\": \"addr@example.com\",\n  \"username\": \"Pancakes.McGee\",\n  \"name\": \"Pancakes McGee\",\n  \"picture_url\": \"http://host.name/path\",\n}",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 Not Found",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/session_controller.rb",    "groupTitle": "Sessions"  }]
