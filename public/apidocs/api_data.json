[  {    "type": "post",    "url": "/followings",    "title": "Follow a person.",    "name": "CreateFollowing",    "group": "Following",    "description": "<p>This is used to follow a person.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Integer",            "optional": false,            "field": "followed_id",            "description": "<p>Person to follow</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"following\": {\n  \"id\" : 123, #id of the following\n  \"follower\" : { ...public json of the person following },\n  \"followed\" : { ...public json of the person followed }\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/followings_controller.rb",    "groupTitle": "Following"  },  {    "type": "delete",    "url": "/followings",    "title": "Unfollow a person.",    "name": "DeleteFollowing",    "group": "Following",    "description": "<p>This is used to unfollow a person.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Integer",            "optional": false,            "field": "followed_id",            "description": "<p>Person to unfollow</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/followings_controller.rb",    "groupTitle": "Following"  },  {    "type": "get",    "url": "/followings",    "title": "Get followers or followings of a user.",    "name": "GetFollowings",    "group": "Following",    "description": "<p>This is used to get a list of someone's followers or followed. If followed_id parameter is supplied, it will get the follower's of that user. If follower_id is supplied, it will get the people that person is following. If nothing is supplied, it will get the people the current user is following.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Integer",            "optional": false,            "field": "followed_id",            "description": "<p>Person to who's followers to get</p>"          },          {            "group": "Parameter",            "type": "Integer",            "optional": false,            "field": "follower_id",            "description": "<p>Id of person who is following the people in the list we are getting.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "  HTTP/1.1 200 Ok\n\"followers [or following]\" {\n  [ ... person json of follower/followed....],\n  ....\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/followings_controller.rb",    "groupTitle": "Following"  },  {    "type": "post",    "url": "/rooms/{room_id}/messages",    "title": "Create a message in a room.",    "name": "CreateMessage",    "group": "Messages",    "description": "<p>The creates a message in a room and posts it to Firebase as appropriate.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "message",            "description": "<p>The message object container for the message parameters.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "message.body",            "description": "<p>The body of the message.</p>"          },          {            "group": "Parameter",            "type": "Attachment",            "optional": true,            "field": "message.picture",            "description": "<p>NOT YET IMPLEMENTED</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\nmessage: { ..message json..see get message action ....}",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 422\n\"errors\" :\n  { \"Body is required, blah blah blah\" }",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/messages_controller.rb",    "groupTitle": "Messages"  },  {    "type": "delete",    "url": "/rooms/{room_id}/messages/id",    "title": "Delete (hide) a single message.",    "name": "DeleteMessage",    "group": "Messages",    "description": "<p>This deletes a single message by marking as hidden. Can only be called by the creator.</p>",    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 Not Found, 401 Unauthorized, etc.",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/messages_controller.rb",    "groupTitle": "Messages"  },  {    "type": "get",    "url": "/rooms/{room_id}/messages",    "title": "Get messages for a date range.",    "name": "GetMessages",    "group": "Messages",    "description": "<p>This gets a list of message for a from date, to date, with an optional limit. Messages are returned newest first, and the limit is applied to that ordering.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "from_date",            "description": "<p>From date in format &quot;YYYY-MM-DD&quot;. Note valid dates start from 2017-01-01.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "to_date",            "description": "<p>To date in format &quot;YYYY-MM-DD&quot;. Note valid dates start from 2017-01-01.</p>"          },          {            "group": "Parameter",            "type": "Integer",            "optional": true,            "field": "limit",            "description": "<p>Limit results to count of limit.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"messages\": [\n  { ....message json..see get message action ....\n  },....\n]",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 Not Found, 422 Unprocessable, etc.",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/messages_controller.rb",    "groupTitle": "Messages"  },  {    "type": "post",    "url": "/people",    "title": "Create person.",    "name": "CreatePerson",    "group": "People",    "description": "<p>This is used to create a new person.</p> <p>We will log them in along the way.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "product",            "description": "<p>Internal name of product</p>"          },          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "person",            "description": "<p>The person's information.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "person.email",            "description": "<p>Email address (required unless using FB auth token).</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "facebook_auth_token",            "description": "<p>Auth token from Facebook</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "person.name",            "description": "<p>Name.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "person.username",            "description": "<p>Username. This needs to be unique within product scope.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "person.password",            "description": "<p>Password.</p>"          },          {            "group": "Parameter",            "type": "Attachment",            "optional": true,            "field": "person.picture",            "description": "<p>NOT YET SUPPORTED Profile picture, this should be <code>image/gif</code>, <code>image/png</code>, or <code>image/jpeg</code>. You should specify at most one of <code>picture</code> and <code>picture_id</code>.</p>"          },          {            "group": "Parameter",            "type": "ObjectId",            "optional": true,            "field": "person.picture_id",            "description": "<p>NOT YET SUPPORTED The profile picture as a temporary image. You should specify at most one of <code>picture</code> and <code>picture_id</code>.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"person\": { // The full private version of the person.\n  \"id\": \"5016\",\n  \"email\": \"addr@example.com\",\n  \"username\": \"Pancakes.McGee\",\n  \"name\": \"Pancakes McGee\",\n  \"picture_url\": \"http://host.name/path\",\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/people_controller.rb",    "groupTitle": "People"  },  {    "type": "post",    "url": "/rooms",    "title": "Create a private room.",    "name": "CreateRoom",    "group": "Rooms",    "description": "<p>The creates a private room and makes it active.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "room",            "description": "<p>The room object container for the room parameters.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "room.name",            "description": "<p>The name of the room. Must be between 3 and 26 characters, inclusive.</p>"          },          {            "group": "Parameter",            "type": "Attachment",            "optional": true,            "field": "room.picture",            "description": "<p>NOT YET IMPLEMENTED</p>"          },          {            "group": "Parameter",            "type": "Array",            "optional": true,            "field": "room.member_ids",            "description": "<p>Ids of persons to add as members. You do not need to include the current user, who will be made a member automatically.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"room\":\n  {\n    \"id\": \"5016\",\n    \"name\": \"Motley People Only\",\n    \"owned\": \"true\", # is current user the owner of room?\n    \"picture_url\": \"http://host.name/path\", #NOT YET IMPLEMENTED\n    \"members\": [\n      { ...person json....},....\n    ]\n\n  }",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 422\n\"errors\" :\n  { \"That name is too short, blah blah blah\" }",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/rooms_controller.rb",    "groupTitle": "Rooms"  },  {    "type": "post",    "url": "/room/id/room_memberships",    "title": "Add a room member.",    "name": "CreateRoomMembership",    "group": "Rooms",    "description": "<p>This adds a person to a private room. On success (person added), just returns 200.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "person",            "description": "<p>The person object.</p>"          },          {            "group": "Parameter",            "type": "Integer",            "optional": false,            "field": "person.id",            "description": "<p>The id of the person.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 422 Unprocessable - Room not active, current user not room owner, person is unwanted or illigitimate, etc.",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/room_memberships_controller.rb",    "groupTitle": "Rooms"  },  {    "type": "delete",    "url": "/rooms/id",    "title": "Delete a private room.",    "name": "DeleteRoom",    "group": "Rooms",    "description": "<p>The deletes a private room. If it has no messages, it deletes it completely. Otherwise, it just changes the status to deleted.</p>",    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 401, 404",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/rooms_controller.rb",    "groupTitle": "Rooms"  },  {    "type": "get",    "url": "/rooms",    "title": "Get a list of rooms.",    "name": "GetRooms",    "group": "Rooms",    "description": "<p>This gets a list of active rooms (public or private, as specified by the &quot;private&quot; parameter).</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Boolean",            "optional": true,            "field": "private",            "description": "<p>Which type of room you want. With true you will get just active private rooms of which the current user is a member. With false (the default), you will get just all active public rooms.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"rooms\": [\n  {\n    \"id\": \"5016\",\n    \"name\": \"Motley People Only\",\n    \"owned\": \"false\", # is current user the owner of room?\n    \"picture_url\": \"http://host.name/path\", #NOT YET IMPLEMENTED\n  },....\n]",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 Not Found",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/rooms_controller.rb",    "groupTitle": "Rooms"  },  {    "type": "patch",    "url": "/rooms/id",    "title": "Update a private room (name).",    "name": "UpdateRoom",    "group": "Rooms",    "description": "<p>The updates a private room. Only the name can by updated, and only by the owner.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "room",            "description": "<p>The room object container for the room parameters.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "room.name",            "description": "<p>The name of the room. Must be between 3 and 26 characters, inclusive.</p>"          },          {            "group": "Parameter",            "type": "Attachment",            "optional": true,            "field": "room.picture",            "description": "<p>NOT YET IMPLEMENTED</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"room\":\n  {\n    ...see room json for create room...\n  }",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 422\n\"errors\" :\n  { \"That name is too short, blah blah blah\" }",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/rooms_controller.rb",    "groupTitle": "Rooms"  },  {    "type": "post",    "url": "/session",    "title": "Log someone in.",    "name": "CreateSession",    "group": "Sessions",    "description": "<p>This is used to log someone in.</p>",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "product",            "description": "<p>Internal name of product logging into.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "email_or_username",            "description": "<p>The person's email address or username. Required unless using Facebook ID.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": true,            "field": "facebook_auth_token",            "description": "<p>The facebook auth token. Required unless using username/password.</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "password",            "description": "<p>The person's password. Required unless using facebook_auth_token</p>"          },          {            "group": "Parameter",            "type": "Boolean",            "optional": true,            "field": "keep",            "description": "<p>NOT YET SUPPORTED True if you want to keep them signed in, otherwise this will be a non-persistent session.</p>"          }        ]      }    },    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"person\": {\n  \"id\": \"5016\",\n  \"email\": \"addr@example.com\",\n  \"username\": \"Pancakes.McGee\",\n  \"name\": \"Pancakes McGee\",\n  \"picture_url\": \"http://host.name/path\",\n}",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/session_controller.rb",    "groupTitle": "Sessions"  },  {    "type": "delete",    "url": "/session",    "title": "Log someone out.",    "name": "DestroySession",    "group": "Sessions",    "description": "<p>This is used to log someone out.</p>",    "version": "0.0.0",    "filename": "app/controllers/api/v1/session_controller.rb",    "groupTitle": "Sessions"  },  {    "type": "get",    "url": "/session",    "title": "Check a session.",    "name": "GetSession",    "group": "Sessions",    "description": "<p>This is used to see if your current session is valid. We return the currently logged-in person if the session is still good and a 404 otherwise.</p>",    "success": {      "examples": [        {          "title": "Success-Response:",          "content": "HTTP/1.1 200 Ok\n\"person\": {\n  \"id\": \"5016\",\n  \"email\": \"addr@example.com\",\n  \"username\": \"Pancakes.McGee\",\n  \"name\": \"Pancakes McGee\",\n  \"picture_url\": \"http://host.name/path\",\n}",          "type": "json"        }      ]    },    "error": {      "examples": [        {          "title": "Error-Response:",          "content": "HTTP/1.1 404 Not Found",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "app/controllers/api/v1/session_controller.rb",    "groupTitle": "Sessions"  }]
