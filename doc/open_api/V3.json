{
  "openapi": "3.0.0",
  "info": {
    "title": "Fanlink API",
    "description": "API documentation of Rails Application. <br/>Optional multiline or single-line Markdown-formatted description in [CommonMark](http://spec.commonmark.org/) or `HTML`.",
    "version": "3.0.0"
  },
  "servers": [
    {
      "url": "https://api.fan.link",
      "description": "Production server"
    },
    {
      "url": "http://staging.fan.link",
      "description": "Staging server"
    },
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    }
  ],
  "security": [
    {
      "SessionCookie": [

      ]
    }
  ],
  "tags": [
    {
      "name": "ActionTypes",
      "description": "Action types allow the apps to send actions that count towards badge/reward unlocks.(Super Admin Only)"
    },
    {
      "name": "ActivityTypes",
      "description": "Activity Types"
    },
    {
      "name": "AssignedRewards",
      "description": "This allows admins to assign rewards to other systems. Currently supports ActionType, Quest, Step, and QuestActivity."
    },
    {
      "name": "BadgeActions",
      "description": "Badge Actions"
    },
    {
      "name": "Badges",
      "description": "Badges"
    },
    {
      "name": "Base"
    },
    {
      "name": "Blocks",
      "description": "Block a person"
    },
    {
      "name": "Categories",
      "description": "Categories"
    },
    {
      "name": "Events",
      "description": "Events"
    },
    {
      "name": "Followings",
      "description": "Followers and following"
    },
    {
      "name": "Levels",
      "description": "Levels"
    },
    {
      "name": "Merchandise",
      "description": "Product Merchandise"
    },
    {
      "name": "MessageReports",
      "description": "Message Reports"
    },
    {
      "name": "Messages",
      "description": "Messages"
    },
    {
      "name": "NotificationDeviceIds",
      "description": "Notification Device IDs"
    },
    {
      "name": "PasswordResets",
      "description": "Password Reset"
    },
    {
      "name": "People",
      "description": "Users"
    },
    {
      "name": "PostCommentReports",
      "description": "Reported comments on posts"
    },
    {
      "name": "PostComments",
      "description": "Comments on a post"
    },
    {
      "name": "PostReactions",
      "description": "User reactions to a post"
    },
    {
      "name": "PostReports",
      "description": "Posts reported by a user"
    },
    {
      "name": "Posts",
      "description": "User/product posts"
    },
    {
      "name": "ProductBeacons",
      "description": "Beacons assigned to a product"
    },
    {
      "name": "Products",
      "description": "Products"
    },
    {
      "name": "QuestActivities",
      "description": "Quest Activities"
    },
    {
      "name": "QuestCompletions",
      "description": "This is used to register an activity as completed."
    },
    {
      "name": "Quests",
      "description": "Quests"
    },
    {
      "name": "RecommendedPeople",
      "description": "Recommended People"
    },
    {
      "name": "RecommendedPosts",
      "description": "Recommended posts"
    },
    {
      "name": "Relationships",
      "description": "User's relationships"
    },
    {
      "name": "Rewards",
      "description": "Reward system. Handles linking rewards to various things."
    },
    {
      "name": "RoomMemberships",
      "description": "What rooms a user belongs to."
    },
    {
      "name": "Rooms",
      "description": "Chat rooms"
    },
    {
      "name": "Session",
      "description": "User session management."
    },
    {
      "name": "Steps",
      "description": "Steps for a quest"
    },
    {
      "name": "Tags",
      "description": "Tags"
    }
  ],
  "paths": {
    "/action_types": {
      "get": {
        "description": "Returns all action types.",
        "summary": "Get all action types",
        "operationId": "ActionTypes_index",
        "tags": [
          "ActionTypes"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/ActionTypeArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "post": {
        "description": "This creates an action type. Action types do nothing until implimented within the apps.",
        "summary": "Create an action type",
        "operationId": "ActionTypes_create",
        "tags": [
          "ActionTypes"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ActionTypeCreateForm"
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/ActionTypeObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/action_types/select": {
      "get": {
        "description": "Returns all action types.",
        "summary": "Get all action types",
        "operationId": "ActionTypes_index",
        "tags": [
          "ActionTypes"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/ActionTypeArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/action_types/{id}": {
      "get": {
        "description": "Returns the action type for the given id.",
        "summary": "Find an action type",
        "operationId": "ActionTypes_show",
        "tags": [
          "ActionTypes"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/ActionTypeObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "patch": {
        "description": "This updates an action type.",
        "summary": "Update an action type.",
        "operationId": "ActionTypes_update",
        "tags": [
          "ActionTypes"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ActionTypeUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/ActionTypeObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "put": {
        "description": "This updates an action type.",
        "summary": "Update an action type.",
        "operationId": "ActionTypes_update",
        "tags": [
          "ActionTypes"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ActionTypeUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/ActionTypeObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "delete": {
        "description": "This destroys an action type. If the action type is in use, it will not be allowed to be destroyed.",
        "summary": "Destroy an action type",
        "operationId": "ActionTypes_destroy",
        "tags": [
          "ActionTypes"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/activities/{activity_id}/types": {
      "get": {
        "description": "Get the activity types belonging to the activity. Returns them ordered by created at descending.",
        "summary": "Get Activity types",
        "operationId": "ActivityTypes_index",
        "tags": [
          "ActivityTypes"
        ],
        "parameters": [
          {
            "name": "activity_id",
            "in": "path",
            "required": true,
            "description": "Activity ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActivityTypeArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "post": {
        "description": "Creates an activity type to be used with the quest activity.",
        "summary": "Create Type for Activity",
        "operationId": "ActivityTypes_create",
        "tags": [
          "ActivityTypes"
        ],
        "parameters": [
          {
            "name": "activity_id",
            "in": "path",
            "required": true,
            "description": "Quest Activity ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/TypeBodyCreate"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActivityTypeObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/activities/{id}": {
      "get": {
        "description": "Returns the quest activity associated with the id.",
        "summary": "Find a quest activity",
        "operationId": "QuestActivities_show",
        "tags": [
          "QuestActivities"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/QuestActivityObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "patch": {
        "description": "Updates a quest activity associated with the id.",
        "summary": "Update a quest activity",
        "operationId": "QuestActivities_update",
        "tags": [
          "QuestActivities"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/QuestActivityUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/QuestActivityObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "put": {
        "description": "Updates a quest activity associated with the id.",
        "summary": "Update a quest activity",
        "operationId": "QuestActivities_update",
        "tags": [
          "QuestActivities"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/QuestActivityUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/QuestActivityObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "delete": {
        "description": "Soft deletes a quest activity.",
        "summary": "Delete a quest activity.",
        "operationId": "QuestActivities_destroy",
        "tags": [
          "QuestActivities"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/activity_types/select": {
      "get": {
        "description": "Get the activity types belonging to the activity. Returns them ordered by created at descending.",
        "summary": "Get Activity types",
        "operationId": "ActivityTypes_index",
        "tags": [
          "ActivityTypes"
        ],
        "parameters": [
          {
            "name": "activity_id",
            "in": "path",
            "required": true,
            "description": "Activity ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActivityTypeArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/activity_types/{id}": {
      "get": {
        "description": "Gets activity type by ID",
        "summary": "Get an activity type",
        "operationId": "ActivityTypes_show",
        "tags": [
          "ActivityTypes"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActivityTypeObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "patch": {
        "description": "Updates an activity type",
        "summary": "Update a type",
        "operationId": "ActivityTypes_update",
        "tags": [
          "ActivityTypes"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/TypeBodyUpdate"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActivityTypeObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "put": {
        "description": "Updates an activity type",
        "summary": "Update a type",
        "operationId": "ActivityTypes_update",
        "tags": [
          "ActivityTypes"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/TypeBodyUpdate"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActivityTypeObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "delete": {
        "description": "Deletes the activity type for given ID, removing it from the Quest Activities.",
        "summary": "Delete a type from an activity",
        "operationId": "ActivityTypes_destroy",
        "tags": [
          "ActivityTypes"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/assigned_rewards": {
      "post": {
        "description": "Links a model with a reward.",
        "summary": "Create an assigned reward",
        "operationId": "AssignedRewards_create",
        "tags": [
          "AssignedRewards"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/AssignedRewardCreateForm"
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/AssignedRewardObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/assigned_rewards/{id}": {
      "patch": {
        "description": "Allows you to update the max_times field.",
        "summary": "Update an assigned reward",
        "operationId": "AssignedRewards_update",
        "tags": [
          "AssignedRewards"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/AssignedRewardUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/AssignedRewardObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "put": {
        "description": "Allows you to update the max_times field.",
        "summary": "Update an assigned reward",
        "operationId": "AssignedRewards_update",
        "tags": [
          "AssignedRewards"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/AssignedRewardUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/AssignedRewardObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "delete": {
        "description": "Soft deletes an assigned reward.",
        "summary": "Destroy an assigned reward.",
        "operationId": "AssignedRewards_destroy",
        "tags": [
          "AssignedRewards"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/badge_actions": {
      "post": {
        "summary": "POST create a badge action",
        "operationId": "BadgeActions_create",
        "tags": [
          "BadgeActions"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/BadgeActionCreate"
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/BadgeActionsPending"
          },
          "429": {
            "description": "Not enough time since last submission of this action type or duplicate action type, person, identifier combination"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/badges": {
      "get": {
        "summary": "Get badges",
        "operationId": "Badges_index",
        "tags": [
          "Badges"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "person_id",
            "in": "query",
            "required": false,
            "description": "The id of the person whose badges you want.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/BadgesArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "post": {
        "description": "Creates a new badge.",
        "summary": "Create a badge",
        "operationId": "Badges_create",
        "tags": [
          "Badges"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/BadgeCreateForm"
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/BadgesObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/badges/{id}": {
      "get": {
        "description": "Finds a badge for the provided id.",
        "summary": "Find a badge",
        "operationId": "Badges_show",
        "tags": [
          "Badges"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/BadgesObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "patch": {
        "description": "Updates a badge for the provided id.",
        "summary": "Update a badge",
        "operationId": "Badges_update",
        "tags": [
          "Badges"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/BadgeUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/BadgesObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "put": {
        "description": "Updates a badge for the provided id.",
        "summary": "Update a badge",
        "operationId": "Badges_update",
        "tags": [
          "Badges"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/BadgeUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/BadgesObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/beacons": {
      "get": {
        "description": "Get beacons for a product.",
        "summary": "Get Product Beacons",
        "operationId": "ProductBeacons_index",
        "tags": [
          "ProductBeacons"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/ProductBeaconArray"
          }
        }
      },
      "post": {
        "description": "Add a beacon to the current user's product.",
        "summary": "Create a beacon",
        "operationId": "ProductBeacons_create",
        "tags": [
          "ProductBeacons"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/BeaconCreateForm"
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/ProductBeaconObject"
          }
        }
      }
    },
    "/beacons/list": {
      "get": {
        "description": "This returns all beacons, regardless of deleted status.",
        "summary": "Get all beacons",
        "operationId": "ProductBeacons_list",
        "tags": [
          "ProductBeacons"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/ProductBeaconArray"
          }
        }
      }
    },
    "/beacons/select": {
      "get": {
        "description": "Get beacons for a product.",
        "summary": "Get Product Beacons",
        "operationId": "ProductBeacons_index",
        "tags": [
          "ProductBeacons"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/ProductBeaconArray"
          }
        }
      }
    },
    "/beacons/{id}": {
      "get": {
        "description": "Returns the product beacon for the passed in ID.",
        "summary": "Get Product Beacon",
        "operationId": "ProductBeacons_show",
        "tags": [
          "ProductBeacons"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/ProductBeaconObject"
          }
        }
      },
      "patch": {
        "description": "Updates a product beacon.",
        "summary": "Update a beacon",
        "operationId": "ProductBeacons_update",
        "tags": [
          "ProductBeacons"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/BeaconUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/ProductBeaconObject"
          }
        }
      },
      "put": {
        "description": "Updates a product beacon.",
        "summary": "Update a beacon",
        "operationId": "ProductBeacons_update",
        "tags": [
          "ProductBeacons"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/BeaconUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/ProductBeaconObject"
          }
        }
      },
      "delete": {
        "description": "Soft deletes a product beacon",
        "summary": "Destroy Product Beacon",
        "operationId": "ProductBeacons_destroy",
        "tags": [
          "ProductBeacons"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          }
        }
      }
    },
    "/blocks": {
      "post": {
        "description": "This is used to block a person. When a person is blocked, any followings and relationships are immediately removed between the users.",
        "summary": "POST Block a person",
        "operationId": "Blocks_create",
        "tags": [
          "Blocks"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/BlockCreate"
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/BlocksObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/blocks/{id}": {
      "delete": {
        "summary": "POST Unblock a person",
        "operationId": "Blocks_destroy",
        "tags": [
          "Blocks"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          }
        }
      }
    },
    "/categories": {
      "get": {
        "description": "Returns categories for product based on current users role.",
        "summary": "Get Categories for Product",
        "operationId": "Categories_index",
        "tags": [
          "Categories"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "product",
            "in": "query",
            "required": false,
            "description": "Internal name of product to get categories for",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/CategoryArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "post": {
        "description": "Creates a category for current user's associated product.",
        "summary": "Create a category",
        "operationId": "Categories_create",
        "tags": [
          "Categories"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CategoryForm"
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/CategoryObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/categories/{id}": {
      "get": {
        "description": "Gets a category by ID.",
        "summary": "Get a category",
        "operationId": "Categories_show",
        "tags": [
          "Categories"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/CategoryObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "patch": {
        "description": "Updates a category with the passed in ID.",
        "summary": "Update a category",
        "operationId": "Categories_update",
        "tags": [
          "Categories"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CategoryUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/CategoryObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "put": {
        "description": "Updates a category with the passed in ID.",
        "summary": "Update a category",
        "operationId": "Categories_update",
        "tags": [
          "Categories"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CategoryUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/CategoryObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/completions": {
      "get": {
        "description": "Returns all quest completions for the currently logged in user.",
        "summary": "Get all activity completions for the current user.",
        "operationId": "QuestCompletions_index",
        "tags": [
          "QuestCompletions"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/QuestCompletionArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/completions/{id}": {
      "get": {
        "description": "Returns the quest completion for the provided id.",
        "summary": "Find a quest completion",
        "operationId": "QuestCompletions_show",
        "tags": [
          "QuestCompletions"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/QuestCompletionObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "patch": {
        "description": "Updates a completion.",
        "summary": "Update a quest completion",
        "operationId": "QuestCompletions_update",
        "tags": [
          "QuestCompletions"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/QuestCompletionUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/QuestCompletionObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "put": {
        "description": "Updates a completion.",
        "summary": "Update a quest completion",
        "operationId": "QuestCompletions_update",
        "tags": [
          "QuestCompletions"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/QuestCompletionUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/QuestCompletionObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/events": {
      "get": {
        "summary": "Get all events for a product",
        "operationId": "Events_index",
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "from_date",
            "in": "query",
            "required": false,
            "description": "Only include events starting on or after date in format \"YYYY-MM-DD\". Note valid dates start from 2017-01-01.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "to_date",
            "in": "query",
            "required": false,
            "description": "Only include events starting on or before date in format \"YYYY-MM-DD\". Note valid dates start from 2017-01-01.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/EventsArray"
          }
        }
      },
      "post": {
        "description": "Creates an event for current user's product",
        "summary": "Create an event",
        "operationId": "Events_create",
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/EventForm"
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/EventsObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/events/{id}": {
      "get": {
        "summary": "Get a single event by id",
        "operationId": "Events_show",
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/EventsObject"
          }
        }
      },
      "patch": {
        "description": "Updates the event for given ID.",
        "summary": "Update an event.",
        "operationId": "Events_update",
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/EventUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/EventsObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "put": {
        "description": "Updates the event for given ID.",
        "summary": "Update an event.",
        "operationId": "Events_update",
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/EventUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/EventsObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "delete": {
        "description": "Soft deletes an event by setting deleted to true.",
        "summary": "Delete an event.",
        "operationId": "Events_destroy",
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/followings": {
      "get": {
        "description": "This is used to get a list of someone's followers or followed. If followed_id parameter is supplied, it will get the follower's of that user. If follower_id is supplied, it will get the people that person is following. If nothing is supplied it will get the people the current user is following.",
        "summary": "Get followers or followings of a user.",
        "operationId": "Followings_index",
        "tags": [
          "Followings"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "followed_id",
            "in": "query",
            "required": false,
            "description": "Person to who's followers to get.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "follower_id",
            "in": "query",
            "required": false,
            "description": "Id of person who is following the people in the list we are getting.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/FollowersArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "post": {
        "description": "This is used to follow a person.",
        "summary": "Follow a person.",
        "operationId": "Followings_create",
        "tags": [
          "Followings"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/FollowingForm"
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/FollowingObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/followings/{id}": {
      "delete": {
        "description": "This is used to unfollow a person.",
        "summary": "Unfollow a person.",
        "operationId": "Followings_destroy",
        "tags": [
          "Followings"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          }
        }
      }
    },
    "/levels": {
      "get": {
        "description": "This gets a list of all levels available to be obtained.",
        "summary": "Get all available levels.",
        "operationId": "Levels_index",
        "tags": [
          "Levels"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/LevelsArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/merchandise": {
      "get": {
        "description": "This gets a list of merchandise, in priority order.",
        "summary": "Get available merchandise.",
        "operationId": "Merchandise_index",
        "tags": [
          "Merchandise"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MerchandiseArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "post": {
        "description": "Create a merchandise item for the user's current product",
        "summary": "Create a merchandise item",
        "operationId": "Merchandise_create",
        "tags": [
          "Merchandise"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/MerchandiseForm"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MerchandiseObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/merchandise/{id}": {
      "get": {
        "description": "This gets a single piece of merchandise for a merchandise id.",
        "summary": "Get a single piece of merchandise.",
        "operationId": "Merchandise_show",
        "tags": [
          "Merchandise"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id."
          },
          "200": {
            "$ref": "#/components/responses/MerchandiseObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "delete": {
        "description": "Soft deletes a merchandise item.",
        "summary": "Delete a merchandise item.",
        "operationId": "Merchandise_destroy",
        "tags": [
          "Merchandise"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/message_reports": {
      "get": {
        "summary": "Get list of messages reports (ADMIN).",
        "operationId": "MessageReports_index",
        "tags": [
          "MessageReports"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "status_filter",
            "in": "query",
            "required": false,
            "description": "If provided, valid values are \"message_hidden\", \"no_action_needed\", and \"pending\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/MessageReportsArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/message_reports/{id}": {
      "patch": {
        "description": "This updates a message report. The only value that can be changed is the status.",
        "summary": "Update a Message Report. (Admin)",
        "operationId": "MessageReports_update",
        "tags": [
          "MessageReports"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/MessageReportUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "put": {
        "description": "This updates a message report. The only value that can be changed is the status.",
        "summary": "Update a Message Report. (Admin)",
        "operationId": "MessageReports_update",
        "tags": [
          "MessageReports"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/MessageReportUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/messages": {
      "get": {
        "description": " This gets a list of messages without regard to room (with possible exception of room filter).",
        "summary": "Get a list of messages without regard to room (ADMIN ONLY).",
        "operationId": "Messages_list",
        "tags": [
          "Messages"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "id_filter",
            "in": "query",
            "required": false,
            "description": "Full match on Message id.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "person_filter",
            "in": "query",
            "required": false,
            "description": "Full or partial match on person username.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "room_id_filter",
            "in": "query",
            "required": false,
            "description": "Full match on Room id.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "body_filter",
            "in": "query",
            "required": false,
            "description": "Full or partial match on message body.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reported_filter",
            "in": "query",
            "required": false,
            "description": "Filter on whether the message has been reported.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/MessagesArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/messages/{id}": {
      "patch": {
        "description": "This updates a message in a room. Only the hidden field can be changed and only by an admin. If the item is hidden, Firebase will be updated to inform the app that the message has been hidden.",
        "summary": "Update a message",
        "operationId": "Messages_update",
        "tags": [
          "Messages"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "room_id",
            "in": "path",
            "required": true,
            "description": "ID of the room the message belongs to.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/MessageUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/MessagesObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "put": {
        "description": "This updates a message in a room. Only the hidden field can be changed and only by an admin. If the item is hidden, Firebase will be updated to inform the app that the message has been hidden.",
        "summary": "Update a message",
        "operationId": "Messages_update",
        "tags": [
          "Messages"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "room_id",
            "in": "path",
            "required": true,
            "description": "ID of the room the message belongs to.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/MessageUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/MessagesObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/notification_device_ids": {
      "post": {
        "description": "This adds a new device id to be used for notifications to the Firebase Cloud Messaging Service. A user can have any number of device ids.",
        "summary": "Add a new device id for a person.",
        "operationId": "NotificationDeviceIds_create",
        "tags": [
          "NotificationDeviceIds"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/NotificationDeviceIdsForm"
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "delete": {
        "description": "This deletes a single device id. Can only be called by the owner.",
        "summary": "Delete a device id",
        "operationId": "NotificationDeviceIds_destroy",
        "tags": [
          "NotificationDeviceIds"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          }
        }
      }
    },
    "/people": {
      "get": {
        "description": "This is used to get a list of people.",
        "summary": "Get a list of people.",
        "operationId": "People_index",
        "tags": [
          "People"
        ],
        "parameters": [
          {
            "name": "username_filter",
            "in": "query",
            "required": false,
            "description": "A username or username fragment to filter on.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email_filter",
            "in": "query",
            "required": false,
            "description": "An email or email fragment to filter on.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PeopleArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "post": {
        "description": "This is used to create a new person.\\nIf the account creation is successful, they will be logged in and we will send an onboarding email (if we have an email address for them).",
        "summary": "Create person.",
        "operationId": "People_create",
        "tags": [
          "People"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PersonCreateForm"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/PersonObject"
          }
        }
      }
    },
    "/people/password_forgot": {
      "post": {
        "description": "This is used to initiate a password reset. Product and email or username required. If email or username is not found, password reset will fail silently.",
        "summary": "Initiate a password reset.",
        "operationId": "PasswordResets_create",
        "tags": [
          "PasswordResets"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PasswordResetForm"
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "description": "HTTP/1.1 200 Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "default": "Reset password instructions have been sent to your email, if it exists in our system."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/people/recommended": {
      "get": {
        "description": "This is used to get a list of people flagged as \"recommended\". It excludes the current user and anyone the current user is following.",
        "summary": "Get recommended people.",
        "operationId": "RecommendedPeople_index",
        "tags": [
          "RecommendedPeople"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RecommendedPeopleArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/people/{id}": {
      "get": {
        "description": "This is used to get a person.",
        "summary": "Get a person.",
        "operationId": "People_show",
        "tags": [
          "People"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PersonObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "patch": {
        "description": "This is used to update a person. Anything not mentioned is left alone.",
        "summary": "Update person.",
        "operationId": "People_update",
        "tags": [
          "People"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PersonUpdateForm"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/PersonObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "put": {
        "description": "This is used to update a person. Anything not mentioned is left alone.",
        "summary": "Update person.",
        "operationId": "People_update",
        "tags": [
          "People"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PersonUpdateForm"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/PersonObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/people/{id}/change_password": {
      "patch": {
        "description": "This is used to change the logged in user's password.",
        "summary": "Change your password.",
        "operationId": "People_change_password",
        "tags": [
          "People"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The person id.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "person": {
                    "type": "object",
                    "properties": {
                      "current_password": {
                        "type": "string",
                        "description": "Current password."
                      },
                      "new_password": {
                        "type": "string",
                        "description": "New password."
                      }
                    },
                    "required": [
                      "current_password"
                    ]
                  }
                },
                "required": [
                  "person"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          }
        }
      }
    },
    "/people/{person_id}/badges": {
      "get": {
        "summary": "Get badges",
        "operationId": "Badges_index",
        "tags": [
          "Badges"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "person_id",
            "in": "query",
            "required": false,
            "description": "The id of the person whose badges you want.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/BadgesArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/post_comment_reports": {
      "get": {
        "description": "This gets a list of post comment reports with optional filter.",
        "summary": "Get list of post comment reports (ADMIN).",
        "operationId": "PostCommentReports_index",
        "tags": [
          "PostCommentReports"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "status_filter",
            "in": "query",
            "required": false,
            "description": "If provided, valid values are \"pending\", \"no_action_needed\", and \"comment_hidden\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/PostCommentReportsArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "post": {
        "description": "This reports a post comment.",
        "summary": "Report a post comment.",
        "operationId": "PostCommentReports_create",
        "tags": [
          "PostCommentReports"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PostCommentReportCreateForm"
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/post_comment_reports/{id}": {
      "patch": {
        "description": "This updates a post comment report. The only value that can be changed is the status.",
        "summary": "Update a Post Comment Report (Admin)",
        "operationId": "PostCommentReports_update",
        "tags": [
          "PostCommentReports"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PostCommentReportUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "put": {
        "description": "This updates a post comment report. The only value that can be changed is the status.",
        "summary": "Update a Post Comment Report (Admin)",
        "operationId": "PostCommentReports_update",
        "tags": [
          "PostCommentReports"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PostCommentReportUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/post_comments/list": {
      "get": {
        "description": "This gets a list of post comments with optional filters and pagination.",
        "summary": "Get a list of post comments (ADMIN).",
        "operationId": "PostComments_list",
        "tags": [
          "PostComments"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "body_filter",
            "in": "query",
            "required": false,
            "description": "Full or partial match on comment body.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "person_filter",
            "in": "query",
            "required": false,
            "description": "Full or partial match on person username or email.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/PostCommentsListArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/post_reports": {
      "get": {
        "description": "This gets a list of post reports with optional filter.",
        "summary": "Get list of post reports (ADMIN).",
        "operationId": "PostReports_index",
        "tags": [
          "PostReports"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "status_filter",
            "in": "query",
            "required": false,
            "description": "If provided, valid values are \"pending\", \"no_action_needed\", and \"post_hidden\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/PostReportsArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "post": {
        "description": "This reports a post that was posted to a feed.",
        "summary": "Report a post.",
        "operationId": "PostReports_create",
        "tags": [
          "PostReports"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PostReportsCreateForm"
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/post_reports/{id}": {
      "patch": {
        "description": "This updates a post report. The only value that can be changed is the status.",
        "summary": "Update a Post Report.",
        "operationId": "PostReports_update",
        "tags": [
          "PostReports"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PostReportsUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "put": {
        "description": "This updates a post report. The only value that can be changed is the status.",
        "summary": "Update a Post Report.",
        "operationId": "PostReports_update",
        "tags": [
          "PostReports"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PostReportsUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/posts": {
      "get": {
        "description": "  This gets a list of posts for a from date, to date, with an optional limit and person. Posts are returned newest first, and the limit is applied to that ordering.\n    Posts included are posts from the passed in person or, if none, the current user along with those of the users the current user is following.",
        "summary": "Get posts for a date range.",
        "operationId": "Posts_index",
        "tags": [
          "Posts"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "person_id",
            "in": "query",
            "required": false,
            "description": "The person whose posts to get. If not supplied, posts from current user plus those from people the current user is following will be returned.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "required": false,
            "description": "Returns posts with the tag specified from the user and the user's that they are following",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "in": "query",
            "required": false,
            "description": "Returns posts with the category specified from the user and the user's that they are following",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/PostsArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "post": {
        "description": "This creates a post and puts in on the feed of the author's followers. It also sends a push notification to poster's followers if the notify_followers flag is set to true.",
        "summary": "Create a post.",
        "operationId": "Posts_create",
        "tags": [
          "Posts"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PostCreateForm"
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/PostsObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/posts/list": {
      "get": {
        "description": "This gets a list of posts with optional filters and pagination.",
        "summary": "Get a list of posts (ADMIN ONLY).",
        "operationId": "Posts_list",
        "tags": [
          "Posts"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "id_filter",
            "in": "query",
            "required": false,
            "description": "Full match on post.id. Will return either a one element array or an empty array.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "person_id_filter",
            "in": "query",
            "required": false,
            "description": "Full match on person id.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "person_filter",
            "in": "query",
            "required": false,
            "description": "Full or partial match on person username or email.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "body_filter",
            "in": "query",
            "required": false,
            "description": "Full or partial match on post body.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "posted_after_filter",
            "in": "query",
            "required": false,
            "description": "Posted at or after timestamp. Format: \"2018-01-08T12:13:42Z\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "posted_before_filter",
            "in": "query",
            "required": false,
            "description": "Posted at or before timestamp. Format: \"2018-01-08T12:13:42Z\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status_filter",
            "in": "query",
            "required": false,
            "description": "Post status. Valid values: pending published deleted rejected errored",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/PostsListsArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/posts/recommended": {
      "get": {
        "description": "This is used to get a list of published posts flagged as \"recommended\".",
        "summary": "Get recommended posts.",
        "operationId": "RecommendedPosts_index",
        "tags": [
          "RecommendedPosts"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/RecommendedPostsArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/posts/{id}": {
      "get": {
        "description": "This gets a single post for a post id.",
        "summary": "Get a single post.",
        "operationId": "Posts_show",
        "tags": [
          "Posts"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/PostsObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "patch": {
        "description": "This updates a post.",
        "summary": "Update a post",
        "operationId": "Posts_update",
        "tags": [
          "Posts"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PostUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/PostsObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "put": {
        "description": "This updates a post.",
        "summary": "Update a post",
        "operationId": "Posts_update",
        "tags": [
          "Posts"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PostUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/PostsObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "delete": {
        "description": "This deletes a single post by marking as deleted. Can only be called by the creator.",
        "summary": "Delete (hide) a single post.",
        "operationId": "Posts_destroy",
        "tags": [
          "Posts"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/posts/{id}/share": {
      "get": {
        "description": "This gets a single post for a post id.",
        "summary": "Get a single, shareable post.",
        "operationId": "Posts_share",
        "tags": [
          "Posts"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the post you want to share.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/PostsShareObject"
          }
        }
      }
    },
    "/posts/{post_id}/comments": {
      "get": {
        "description": "This gets all the non-hidden comments on a post with pagination.",
        "summary": "Get the comments on a post.",
        "operationId": "PostComments_index",
        "tags": [
          "PostComments"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "description": "Post ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/PostCommentsArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "post": {
        "description": "This creates a post comment. It is automatically attributed to the logged in user.",
        "summary": "Create a comment on a post.",
        "operationId": "PostComments_create",
        "tags": [
          "PostComments"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "description": "Post ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PostCommentCreateForm"
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/PostCommentsObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/posts/{post_id}/comments/{id}": {
      "delete": {
        "description": "This deletes a comment on a post. Can be performed by admin or creator of comment.",
        "summary": "Delete a comment on a post.",
        "operationId": "PostComments_destroy",
        "tags": [
          "PostComments"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "description": "The id of the post to which the comment relates",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/posts/{post_id}/reactions": {
      "post": {
        "description": "This reacts to a post.",
        "summary": "React to a post.",
        "operationId": "PostReactions_create",
        "tags": [
          "PostReactions"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "description": "The id of the post to which you are reacting.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PostReactionCreateForm"
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/PostReactionsObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/posts/{post_id}/reactions/{id}": {
      "patch": {
        "description": "This updates a reaction on a post.",
        "summary": "Update a reaction to a post.",
        "operationId": "PostReactions_update",
        "tags": [
          "PostReactions"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "description": "The id of the post to which you are reacting.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PostReactionUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/PostReactionsObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "put": {
        "description": "This updates a reaction on a post.",
        "summary": "Update a reaction to a post.",
        "operationId": "PostReactions_update",
        "tags": [
          "PostReactions"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "description": "The id of the post to which you are reacting.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PostReactionUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/PostReactionsObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "delete": {
        "description": "This deletes a reaction to a post.",
        "summary": "Delete a reaction to a post.",
        "operationId": "PostReactions_destroy",
        "tags": [
          "PostReactions"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "description": "The id of the post to which you are reacting.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/posts/{post_id}/share": {
      "get": {
        "description": "This gets a single post for a post id.",
        "summary": "Get a single, shareable post.",
        "operationId": "Posts_share",
        "tags": [
          "Posts"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the post you want to share.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/PostsShareObject"
          }
        }
      }
    },
    "/products": {
      "get": {
        "description": "Get all products (Super Admin Only)",
        "summary": "Get Products",
        "operationId": "Products_index",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/ProductArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "post": {
        "description": "Create a product (Super Admin Only)",
        "summary": "Create Product",
        "operationId": "Products_create",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ProductCreateForm"
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/ProductObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/products/select": {
      "get": {
        "description": "Get all products (Super Admin Only)",
        "summary": "Get Products",
        "operationId": "Products_index",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/ProductArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/products/{id}": {
      "get": {
        "description": "Get a product for provided ID. (Super Admin Only)",
        "summary": "Get Product",
        "operationId": "Products_show",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/ProductObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "patch": {
        "description": "Update a product (Super Admin Only)",
        "summary": "Update Product",
        "operationId": "Products_update",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ProductUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/ProductObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "put": {
        "description": "Update a product (Super Admin Only)",
        "summary": "Update Product",
        "operationId": "Products_update",
        "tags": [
          "Products"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ProductUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/ProductObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/quests": {
      "get": {
        "description": "Returns all quests for the current user's product that aren't deleted.",
        "summary": "Get all viewable quests",
        "operationId": "Quests_index",
        "tags": [
          "Quests"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/QuestsArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "post": {
        "description": "Creates a quest for the current user's product.",
        "summary": "Create a quest",
        "operationId": "Quests_create",
        "tags": [
          "Quests"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/QuestCreateForm"
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/QuestObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/quests/list": {
      "get": {
        "description": "Returns all quests for the current user's product regardless of status.",
        "summary": "Get all quests (Admin Only)",
        "operationId": "Quests_list",
        "tags": [
          "Quests"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/QuestsArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/quests/select": {
      "get": {
        "description": "Returns all quests for the current user's product that aren't deleted.",
        "summary": "Get all viewable quests",
        "operationId": "Quests_index",
        "tags": [
          "Quests"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/QuestsArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/quests/{id}": {
      "get": {
        "description": "Returns the quest for the given ID",
        "summary": "Find a quest",
        "operationId": "Quests_show",
        "tags": [
          "Quests"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/QuestObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "patch": {
        "description": "Updates the quest for the given id",
        "summary": "Update a quest",
        "operationId": "Quests_update",
        "tags": [
          "Quests"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/QuestUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/QuestObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "put": {
        "description": "Updates the quest for the given id",
        "summary": "Update a quest",
        "operationId": "Quests_update",
        "tags": [
          "Quests"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/QuestUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/QuestObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "delete": {
        "description": "Soft deletes a quest",
        "summary": "Destroy a quest",
        "operationId": "Quests_destroy",
        "tags": [
          "Quests"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/quests/{quest_id}/completions": {
      "get": {
        "description": "Returns all quest completions for the currently logged in user.",
        "summary": "Get all activity completions for the current user.",
        "operationId": "QuestCompletions_index",
        "tags": [
          "QuestCompletions"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/QuestCompletionArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "post": {
        "description": "This registers an activity as complete for the current user.",
        "summary": "Create a quest completion",
        "operationId": "QuestCompletions_create",
        "tags": [
          "QuestCompletions"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "step_id",
            "in": "path",
            "required": true,
            "description": "The step the activity is associated with.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/QuestCompletionCreateForm"
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/QuestCompletionObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/quests/{quest_id}/steps": {
      "get": {
        "description": "Returns all the steps for a quest",
        "summary": "Get all steps",
        "operationId": "Steps_index",
        "tags": [
          "Steps"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "quest_id",
            "in": "path",
            "required": true,
            "description": "The ID of the quest to fetch steps for.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/Array"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "post": {
        "description": "Creates a step for the supplied quest id.",
        "summary": "Create a step",
        "operationId": "Steps_create",
        "tags": [
          "Steps"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quest_id",
            "in": "path",
            "required": true,
            "description": "The ID of the quest to fetch steps for.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/StepCreateForm"
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/StepObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/relationships": {
      "get": {
        "description": "This is used to get a list of someone's friends. If the person supplied is the logged in user, \"requested\" status is included for requests TO the current user. Otherwise, only \"friended\" status is included.",
        "summary": "Get current relationships of a person.",
        "operationId": "Relationships_index",
        "tags": [
          "Relationships"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "person_id",
            "in": "path",
            "required": true,
            "description": "Person whose friends to get",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/RelationshipsObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "post": {
        "description": "This is used to send a friend request to a person. If there is a block between the people, an error will be returned.",
        "summary": "Send a friend request to a person.",
        "operationId": "Relationships_create",
        "tags": [
          "Relationships"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "relationship": {
                    "type": "object",
                    "properties": {
                      "requested_to_id": {
                        "type": "integer",
                        "description": "Person for whom the request is intended"
                      }
                    },
                    "required": [
                      "requested_to_id"
                    ]
                  }
                },
                "required": [
                  "relationship"
                ]
              }
            }
          }
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/RelationshipsArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/relationships/{id}": {
      "get": {
        "description": "This gets a single relationship for a relationship id. Only available to a participating user.",
        "summary": "Get a single relationship.",
        "operationId": "Relationships_show",
        "tags": [
          "Relationships"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/RelationshipsObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "patch": {
        "description": "This is used to accept, deny or unfriend a relationship (friend request).",
        "summary": "Update a relationship.",
        "operationId": "Relationships_update",
        "tags": [
          "Relationships"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "relationship": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "description": "  New status. Valid values are \"friended\", \"denied\" or \"withdrawn\". However each one is only valid in the state and/or from the person that you would expect (e.g. the relationship requester cannot update with \"friended\")."
                      }
                    },
                    "required": [
                      "status"
                    ]
                  }
                },
                "required": [
                  "relationship"
                ]
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/RelationshipsObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "put": {
        "description": "This is used to accept, deny or unfriend a relationship (friend request).",
        "summary": "Update a relationship.",
        "operationId": "Relationships_update",
        "tags": [
          "Relationships"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "relationship": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "description": "  New status. Valid values are \"friended\", \"denied\" or \"withdrawn\". However each one is only valid in the state and/or from the person that you would expect (e.g. the relationship requester cannot update with \"friended\")."
                      }
                    },
                    "required": [
                      "status"
                    ]
                  }
                },
                "required": [
                  "relationship"
                ]
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/RelationshipsObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "delete": {
        "description": "This is used to unfriend a person.",
        "summary": "Unfriend a person.",
        "operationId": "Relationships_destroy",
        "tags": [
          "Relationships"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/rewards": {
      "get": {
        "description": "Returns all rewards for the current user's product",
        "summary": "Get all rewards",
        "operationId": "Rewards_index",
        "tags": [
          "Rewards"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/RewardArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "post": {
        "description": "Creates a reward",
        "summary": "Create a reward",
        "operationId": "Rewards_create",
        "tags": [
          "Rewards"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/RewardCreateForm"
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/RewardObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/rewards/select": {
      "get": {
        "description": "Returns all rewards for the current user's product",
        "summary": "Get all rewards",
        "operationId": "Rewards_index",
        "tags": [
          "Rewards"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/RewardArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/rewards/{id}": {
      "get": {
        "description": "Returns the reward for the provided id.",
        "summary": "Find a reward",
        "operationId": "Rewards_show",
        "tags": [
          "Rewards"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/RewardObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "patch": {
        "description": "Updates a reward",
        "summary": "Update a reward",
        "operationId": "Rewards_update",
        "tags": [
          "Rewards"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/RewardUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/RewardObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "put": {
        "description": "Updates a reward",
        "summary": "Update a reward",
        "operationId": "Rewards_update",
        "tags": [
          "Rewards"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/RewardUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/RewardObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "delete": {
        "description": "Soft deletes a reward",
        "summary": "Destroy a reward",
        "operationId": "Rewards_destroy",
        "tags": [
          "Rewards"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/rewards/{reward_id}/assigned": {
      "get": {
        "description": "Returns all assigned rewards for the provided reward id.",
        "summary": "Return all assigned rewards",
        "operationId": "AssignedRewards_index",
        "tags": [
          "AssignedRewards"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/AssignedRewardArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/rooms": {
      "get": {
        "description": "This gets a list of active rooms (public or private, as specified by the \"private\" parameter).",
        "summary": "Get a list of rooms.",
        "operationId": "Rooms_index",
        "tags": [
          "Rooms"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "private",
            "in": "query",
            "required": false,
            "description": "Which type of room you want. With true you will get just active private rooms of which the current user is a member. With false (the default), you will get just all active public rooms.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/RoomsArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "post": {
        "description": "The creates a private room and makes it active.",
        "summary": "Create a private room.",
        "operationId": "Rooms_create",
        "tags": [
          "Rooms"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "room": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the room. Must be between 3 and 26 characters, inclusive."
                      },
                      "description": {
                        "type": "string",
                        "description": "The description of the room."
                      },
                      "picture": {
                        "type": "string",
                        "format": "binary",
                        "description": "Picture for the room."
                      },
                      "member_ids": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "ids": {
                              "type": "integer",
                              "description": "Ids of persons to add as members. Users who are blocked by or who are blocking the current user will be silently excluded. You do not need to include the current user, who will be made a member automatically."
                            }
                          }
                        }
                      }
                    },
                    "required": [
                      "name"
                    ]
                  }
                },
                "required": [
                  "room"
                ]
              }
            }
          }
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/RoomsObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/rooms/{id}": {
      "patch": {
        "description": "The updates a private room. Only the name can by updated, and only by the owner.",
        "summary": "Update a private room (name).",
        "operationId": "Rooms_update",
        "tags": [
          "Rooms"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "room": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the room. Must be between 3 and 26 characters, inclusive."
                      },
                      "picture": {
                        "type": "string",
                        "format": "binary",
                        "description": "Picture for the room."
                      }
                    },
                    "required": [
                      "name"
                    ]
                  }
                },
                "required": [
                  "room"
                ]
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/RoomsObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "put": {
        "description": "The updates a private room. Only the name can by updated, and only by the owner.",
        "summary": "Update a private room (name).",
        "operationId": "Rooms_update",
        "tags": [
          "Rooms"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "room": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the room. Must be between 3 and 26 characters, inclusive."
                      },
                      "picture": {
                        "type": "string",
                        "format": "binary",
                        "description": "Picture for the room."
                      }
                    },
                    "required": [
                      "name"
                    ]
                  }
                },
                "required": [
                  "room"
                ]
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/RoomsObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "delete": {
        "description": "The deletes a private room. If it has no messages, it deletes it completely. Otherwise, it just changes the status to deleted.",
        "summary": "Delete a private room.",
        "operationId": "Rooms_destroy",
        "tags": [
          "Rooms"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/rooms/{room_id}/message_reports": {
      "post": {
        "description": "This reports a message that was posted to a public room.",
        "summary": "Report a message in a public room.",
        "operationId": "MessageReports_create",
        "tags": [
          "MessageReports"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "room_id",
            "in": "path",
            "required": true,
            "description": "Id of the room in which the message was created.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/MessageReportCreateForm"
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/rooms/{room_id}/messages": {
      "get": {
        "description": "This gets a list of message for a from date, to date, with an optional limit. Messages are returned newest first, and the limit is applied to that ordering.",
        "summary": "Get messages.",
        "operationId": "Messages_index",
        "tags": [
          "Messages"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "room_id",
            "in": "path",
            "required": true,
            "description": "ID of the room the messages belongs to.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "from_date",
            "in": "query",
            "required": false,
            "description": "From date in format \"YYYY-MM-DD\". Note valid dates start from 2017-01-01.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to_date",
            "in": "query",
            "required": false,
            "description": "To date in format \"YYYY-MM-DD\". Note valid dates start from 2017-01-01.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Limit results to count of limit.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/MessagesArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "post": {
        "description": "This creates a message in a room and posts it to Firebase as appropriate.",
        "summary": "Create a message in a room.",
        "operationId": "Messages_create",
        "tags": [
          "Messages"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "room_id",
            "in": "path",
            "required": true,
            "description": "ID of the room the message belongs to.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/MessageCreateForm"
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/MessagesObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/rooms/{room_id}/messages/{id}": {
      "get": {
        "description": "This gets a single message for a message id. Only works for messages in private rooms. If the message author has been blocked by the current user, this will return 404 Not Found.",
        "summary": "Get a single message.",
        "operationId": "Messages_show",
        "tags": [
          "Messages"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "room_id",
            "in": "path",
            "required": true,
            "description": "ID of the room the message belongs to.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/MessagesObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "patch": {
        "description": "This updates a message in a room. Only the hidden field can be changed and only by an admin. If the item is hidden, Firebase will be updated to inform the app that the message has been hidden.",
        "summary": "Update a message",
        "operationId": "Messages_update",
        "tags": [
          "Messages"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "room_id",
            "in": "path",
            "required": true,
            "description": "ID of the room the message belongs to.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/MessageUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/MessagesObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "put": {
        "description": "This updates a message in a room. Only the hidden field can be changed and only by an admin. If the item is hidden, Firebase will be updated to inform the app that the message has been hidden.",
        "summary": "Update a message",
        "operationId": "Messages_update",
        "tags": [
          "Messages"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "room_id",
            "in": "path",
            "required": true,
            "description": "ID of the room the message belongs to.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/MessageUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/MessagesObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "delete": {
        "description": "This deletes a single message by marking as hidden. Can only be called by the creator.",
        "summary": "Delete (hide) a single message.",
        "operationId": "Messages_destroy",
        "tags": [
          "Messages"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "room_id",
            "in": "path",
            "required": true,
            "description": "ID of the room the message belongs to.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/rooms/{room_id}/room_memberships": {
      "post": {
        "description": "This adds a person to a private room. On success (person added), just returns 200.",
        "summary": "Add a room member.",
        "operationId": "RoomMemberships_create",
        "tags": [
          "RoomMemberships"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "room_id",
            "in": "path",
            "required": true,
            "description": "ID of the room to add the person to.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "person": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "description": "The id of the person."
                      }
                    },
                    "required": [
                      "id"
                    ]
                  }
                },
                "required": [
                  "person"
                ]
              }
            }
          }
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/session": {
      "get": {
        "description": "This is used to see if your current session is valid. We return the currently logged-in person if the session is still good and a 404 otherwise.",
        "summary": "Check a session.",
        "operationId": "Session_index",
        "tags": [
          "Session"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SessionObject"
          }
        }
      },
      "post": {
        "description": "This is used to log someone in.",
        "summary": "Log someone in.",
        "operationId": "Session_create",
        "tags": [
          "Session"
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "product": {
                    "type": "string",
                    "description": "Internal name of product logging into."
                  },
                  "email_or_username": {
                    "type": "string",
                    "description": "The person's email address or username. Required unless using Facebook ID."
                  },
                  "facebook_auth_token": {
                    "type": "string",
                    "description": "The facebook auth token. Required unless using username/password."
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "The person's password. Required unless using facebook_auth_token."
                  },
                  "keep": {
                    "type": "boolean",
                    "description": "NOT YET SUPPORTED. True if you want to keep them signed in, otherwise this will be a non-persistent session."
                  }
                },
                "required": [
                  "product",
                  "email_or_username",
                  "facebook_auth_token",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SessionObject"
          }
        }
      },
      "delete": {
        "description": "This is used to log someone out.",
        "summary": "Log someone out.",
        "operationId": "Session_destroy",
        "tags": [
          "Session"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          }
        }
      }
    },
    "/steps/{id}": {
      "get": {
        "description": "Returns the step for the supplied id.",
        "summary": "Find a step",
        "operationId": "Steps_show",
        "tags": [
          "Steps"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/StepObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "patch": {
        "description": "Updates a step for the supplied id.",
        "summary": "Update a step",
        "operationId": "Steps_update",
        "tags": [
          "Steps"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/StepUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/StepObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "put": {
        "description": "Updates a step for the supplied id.",
        "summary": "Update a step",
        "operationId": "Steps_update",
        "tags": [
          "Steps"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/StepUpdateForm"
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/StepObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "delete": {
        "description": "Soft deletes a step.",
        "summary": "Destroy a step",
        "operationId": "Steps_destroy",
        "tags": [
          "Steps"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/steps/{step_id}/activities": {
      "get": {
        "description": "Get all quest activities associated with a step.",
        "summary": "Get Quest Activities",
        "operationId": "QuestActivities_index",
        "tags": [
          "QuestActivities"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/QuestActivityArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "post": {
        "description": "Creates a quest activity",
        "summary": "Create a quest activity",
        "operationId": "QuestActivities_create",
        "tags": [
          "QuestActivities"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/QuestActivityCreateForm"
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/QuestActivityObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/steps/{step_id}/completions": {
      "get": {
        "description": "Returns all quest completions for the currently logged in user.",
        "summary": "Get all activity completions for the current user.",
        "operationId": "QuestCompletions_index",
        "tags": [
          "QuestCompletions"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/QuestCompletionArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "post": {
        "description": "This registers an activity as complete for the current user.",
        "summary": "Create a quest completion",
        "operationId": "QuestCompletions_create",
        "tags": [
          "QuestCompletions"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v3+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "step_id",
            "in": "path",
            "required": true,
            "description": "The step the activity is associated with.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/QuestCompletionCreateForm"
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/QuestCompletionObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "SessionCookie": {
        "type": "apiKey",
        "name": "_fanlink_session",
        "in": "cookie"
      }
    },
    "schemas": {
      "ActionTypeJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "internal_name": {
            "type": "string"
          },
          "seconds_lag": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Action Type Response"
      },
      "ActivityTypeJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "atype": {
            "type": "string"
          },
          "activity_id": {
            "type": "integer"
          },
          "value": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          }
        },
        "description": "Activity Type Reponse"
      },
      "AssignedRewardJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          }
        },
        "description": "Activity Type Response"
      },
      "BadgeJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "internal_name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "picture_url": {
            "type": "string"
          },
          "action_requirement": {
            "type": "integer"
          },
          "point_value": {
            "type": "integer"
          }
        },
        "description": "Badge Response"
      },
      "BlockJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "blocker_id": {
            "type": "integer"
          },
          "blocked_id": {
            "type": "integer"
          }
        },
        "description": "Block Reponse"
      },
      "CategoryJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "product_id": {
            "type": "integer"
          },
          "color": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "posts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostJson"
            }
          }
        },
        "description": "Category Reponse"
      },
      "EventJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "starts_at": {
            "type": "string",
            "format": "date-time"
          },
          "ends_at": {
            "type": "string",
            "format": "date-time"
          },
          "ticket_url": {
            "type": "string"
          },
          "place_identifier": {
            "type": "string"
          }
        },
        "description": "Event Response"
      },
      "FollowingJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "follower": {
            "$ref": "#/components/schemas/PersonJson"
          },
          "followed": {
            "$ref": "#/components/schemas/PersonJson"
          }
        },
        "description": "Following Response"
      },
      "LevelJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "internal_name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "points": {
            "type": "integer"
          },
          "picture_url": {
            "type": "string"
          }
        },
        "description": "Level Response"
      },
      "MerchandiseJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "price": {
            "type": "integer"
          },
          "purchase_url": {
            "type": "string"
          },
          "picture_url": {
            "type": "string"
          },
          "available": {
            "type": "boolean"
          },
          "priority": {
            "type": "integer"
          }
        },
        "description": "Merchandise Response"
      },
      "MessageReportJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "message_id": {
            "type": "integer"
          },
          "poster": {
            "type": "string"
          },
          "reporter": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "description": "Message Report Response"
      },
      "MentionJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "person_id": {
            "type": "integer"
          },
          "location": {
            "type": "integer"
          },
          "length": {
            "type": "integer"
          }
        },
        "description": "Notification Type ID Response"
      },
      "MessageJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "body": {
            "type": "string"
          },
          "picture_url": {
            "type": "string"
          },
          "audio_url": {
            "type": "string"
          },
          "audio_size": {
            "type": "string"
          },
          "audio_content_type": {
            "type": "string"
          },
          "person": {
            "$ref": "#/components/schemas/PersonJson"
          },
          "mentions": {
            "$ref": "#/components/schemas/MentionJson"
          }
        },
        "description": "Message Response"
      },
      "MessageListJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "person_id": {
            "type": "integer"
          },
          "room_id": {
            "type": "integer"
          },
          "body": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "picture_url": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Message Response"
      },
      "NotificationDeviceIdJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          }
        },
        "description": "Notification Type ID Response"
      },
      "PersonJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "username": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "biography": {
            "type": "string"
          },
          "country_code": {
            "type": "string"
          },
          "birthdate": {
            "type": "string"
          },
          "picture_url": {
            "type": "string"
          },
          "product_account": {
            "type": "boolean"
          },
          "recommended": {
            "type": "boolean"
          },
          "chat_banned": {
            "type": "boolean"
          },
          "designation": {
            "type": "string"
          },
          "following_id": {
            "type": "integer"
          },
          "relationships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelationshipJson"
            }
          },
          "badge_points": {
            "type": "integer"
          },
          "role": {
            "type": "string"
          },
          "level": {
            "type": "string"
          },
          "do_not_message_me": {
            "type": "boolean"
          },
          "pin_messages_from": {
            "type": "boolean"
          },
          "auto_follow": {
            "type": "boolean"
          },
          "num_followers": {
            "type": "integer"
          },
          "num_following": {
            "type": "integer"
          },
          "facebookid": {
            "type": "integer"
          },
          "facebook_picture_url": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Person Response"
      },
      "PersonPrivateJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "username": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "biography": {
            "type": "string"
          },
          "country_code": {
            "type": "string"
          },
          "birthdate": {
            "type": "string"
          },
          "picture_url": {
            "type": "string"
          },
          "product_account": {
            "type": "boolean"
          },
          "recommended": {
            "type": "boolean"
          },
          "chat_banned": {
            "type": "boolean"
          },
          "designation": {
            "type": "string"
          },
          "following_id": {
            "type": "integer"
          },
          "relationships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelationshipJson"
            }
          },
          "badge_points": {
            "type": "integer"
          },
          "role": {
            "type": "string"
          },
          "level": {
            "type": "string"
          },
          "do_not_message_me": {
            "type": "boolean"
          },
          "pin_messages_from": {
            "type": "boolean"
          },
          "auto_follow": {
            "type": "boolean"
          },
          "num_followers": {
            "type": "integer"
          },
          "num_following": {
            "type": "integer"
          },
          "facebookid": {
            "type": "integer"
          },
          "facebook_picture_url": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string"
          },
          "product": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "internal_name": {
                "type": "string"
              }
            }
          }
        },
        "description": "Private Person Response"
      },
      "PersonRewardJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          }
        },
        "description": "Person Reward Response"
      },
      "PostCommentReportJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "post_comment_id": {
            "type": "integer"
          },
          "commenter": {
            "type": "string"
          },
          "reporter": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "description": "Post Comment Report Response"
      },
      "PostCommentJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "body": {
            "type": "string"
          },
          "mentions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MentionJson"
            }
          },
          "person": {
            "$ref": "#/components/schemas/PersonJson"
          }
        },
        "description": "Post Comment Response"
      },
      "PostCommentListJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "person_id": {
            "type": "integer"
          },
          "post_id": {
            "type": "integer"
          },
          "body": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "mentions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MentionJson"
            }
          }
        },
        "description": "Post Comment Response"
      },
      "PostReactionJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "post_id": {
            "type": "integer"
          },
          "person_id": {
            "type": "integer"
          },
          "reaction": {
            "type": "string"
          }
        },
        "description": "Post Reaction Response"
      },
      "PostReportJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "post_id": {
            "type": "integer"
          },
          "poster": {
            "type": "string"
          },
          "reporter": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "description": "Post Report Response"
      },
      "PostJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "body": {
            "type": "string"
          },
          "picture_url": {
            "type": "string"
          },
          "audio_url": {
            "type": "string"
          },
          "audio_size": {
            "type": "integer"
          },
          "audio_content_type": {
            "type": "string"
          },
          "person": {
            "$ref": "#/components/schemas/PersonJson"
          },
          "post_reaction_counts": {
            "type": "integer"
          },
          "post_reaction": {
            "$ref": "#/components/schemas/PostReactionJson"
          },
          "global": {
            "type": "boolean"
          },
          "starts_at": {
            "type": "string",
            "format": "date-time"
          },
          "ends_at": {
            "type": "string",
            "format": "date-time"
          },
          "repost_interval": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "priority": {
            "type": "integer"
          },
          "recommended": {
            "type": "boolean"
          },
          "notify_followers": {
            "type": "boolean"
          },
          "comment_count": {
            "type": "integer"
          },
          "category": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "color": {
                "type": "string"
              },
              "role": {
                "type": "string"
              }
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagJson"
            }
          }
        },
        "description": "Post Response"
      },
      "PostShareJson": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string"
          },
          "picture_url": {
            "type": "string"
          },
          "person": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "picture_url": {
                "type": "string"
              }
            }
          }
        },
        "description": "Shared Post Response"
      },
      "PostListJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "person": {
            "$ref": "#/components/schemas/PersonJson"
          },
          "body": {
            "type": "string"
          },
          "picture_url": {
            "type": "string"
          },
          "global": {
            "type": "boolean"
          },
          "starts_at": {
            "type": "string",
            "format": "date-time"
          },
          "ends_at": {
            "type": "string",
            "format": "date-time"
          },
          "repost_interval": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "priority": {
            "type": "integer"
          },
          "recommended": {
            "type": "boolean"
          },
          "notify_followers": {
            "type": "boolean"
          },
          "comment_count": {
            "type": "integer"
          },
          "category": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "color": {
                "type": "string"
              },
              "role": {
                "type": "string"
              }
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "tag": {
                  "$ref": "#/components/schemas/TagJson"
                }
              }
            }
          }
        },
        "description": "List Post Response"
      },
      "ProductBeaconJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "product_id": {
            "type": "integer"
          },
          "beacon_pid": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          },
          "lower": {
            "type": "integer"
          },
          "upper": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Product Beacon Response"
      },
      "ProductJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "internal_name": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "description": "Product Response"
      },
      "QuestActivityJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "quest_id": {
            "type": "integer"
          },
          "step_id": {
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "hint": {
            "type": "string"
          },
          "picture_url": {
            "type": "string"
          },
          "picture_width": {
            "type": "integer"
          },
          "picture_height": {
            "type": "integer"
          },
          "completed": {
            "type": "boolean"
          },
          "requirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityTypeJson"
            }
          },
          "deleted": {
            "type": "boolean"
          },
          "step": {
            "$ref": "#/components/schemas/StepJson"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Quest Activity Response"
      },
      "QuestCompletionJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "person_id": {
            "type": "integer"
          },
          "step_id": {
            "type": "integer"
          },
          "activity_id": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Quest Completion Response"
      },
      "QuestJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "product_id": {
            "type": "integer"
          },
          "event_id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "internal_name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "picture_url": {
            "type": "string"
          },
          "picture_width": {
            "type": "integer"
          },
          "picture_height": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "starts_at": {
            "type": "string",
            "format": "date-time"
          },
          "ends_at": {
            "type": "string",
            "format": "date-time"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepJson"
            }
          }
        },
        "description": "Quest Response"
      },
      "RecommendedPeopleJson": {
        "$ref": "#/components/schemas/PersonJson"
      },
      "RelationshipJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "requested_by": {
            "$ref": "#/components/schemas/PersonJson"
          },
          "requested_to": {
            "$ref": "#/components/schemas/PersonJson"
          }
        },
        "description": "Relationship Response"
      },
      "RewardJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          }
        },
        "description": "Reward Response"
      },
      "RoomMembershipJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          }
        },
        "description": "Room Membership Response"
      },
      "RoomJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "owned": {
            "type": "boolean"
          },
          "picture_url": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "members": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "member": {
                  "$ref": "#/components/schemas/PersonJson"
                }
              }
            }
          }
        },
        "description": "Room Response"
      },
      "SessionJson": {
        "type": "object",
        "properties": {
          "person": {
            "$ref": "#/components/schemas/PersonPrivateJson"
          }
        },
        "description": "Session Response"
      },
      "StepJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "quest_id": {
            "type": "integer"
          },
          "unlocks": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "display": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "quest_activities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuestActivityJson"
            }
          },
          "delay_unlock": {
            "type": "integer"
          },
          "unlocks_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Step Response"
      },
      "TagJson": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "description": "Tag Response"
      }
    },
    "requestBodies": {
      "PasswordResetForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "product": {
                  "type": "string",
                  "description": "Internal name of product."
                },
                "email_or_username": {
                  "type": "string",
                  "description": "The person's email or username."
                }
              },
              "required": [
                "product",
                "email_or_username"
              ]
            }
          }
        }
      },
      "PersonCreateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "product": {
                  "type": "string",
                  "description": "Internal name of the product."
                },
                "person": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "format": "email",
                      "description": "Email address (required unless using FB auth token)."
                    },
                    "facebook_auth_token": {
                      "type": "string",
                      "description": "Auth token from Facebook"
                    },
                    "name": {
                      "type": "string",
                      "description": "User's name."
                    },
                    "username": {
                      "type": "string",
                      "description": "Username. This needs to be unique within product scope."
                    },
                    "password": {
                      "type": "string",
                      "format": "password",
                      "description": "User\\s password."
                    },
                    "picture": {
                      "type": "string",
                      "format": "binary",
                      "description": "Profile picture, this should be `image/gif`, `image/png`, or `image/jpeg`."
                    },
                    "gender": {
                      "type": "string",
                      "description": "Gender. Valid options: unspecified (default), male, female."
                    },
                    "birthdate": {
                      "type": "string",
                      "description": "Birth dateTo date in format \"YYYY-MM-DD\"."
                    },
                    "biography": {
                      "type": "string",
                      "description": "A paragraph a user can submit about themselves."
                    },
                    "city": {
                      "type": "string",
                      "description": "Person's supplied city."
                    },
                    "country_code": {
                      "type": "string",
                      "description": "Alpha2 code (two letters) from ISO 3166 list."
                    },
                    "recommended": {
                      "type": "boolean",
                      "description": "Sets the post to recommended. Available only to admins and product accounts."
                    }
                  },
                  "required": [
                    "email",
                    "facebook_auth_token",
                    "username",
                    "password"
                  ]
                }
              },
              "required": [
                "product",
                "person"
              ]
            }
          }
        }
      },
      "PersonUpdateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "product": {
                  "type": "string",
                  "description": "Internal name of the product."
                },
                "person": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "format": "email",
                      "description": "Email address (required unless using FB auth token)."
                    },
                    "facebook_auth_token": {
                      "type": "string",
                      "description": "Auth token from Facebook"
                    },
                    "name": {
                      "type": "string",
                      "description": "User's name."
                    },
                    "username": {
                      "type": "string",
                      "description": "Username. This needs to be unique within product scope."
                    },
                    "password": {
                      "type": "string",
                      "format": "password",
                      "description": "User\\s password."
                    },
                    "picture": {
                      "type": "string",
                      "format": "binary",
                      "description": "Profile picture, this should be `image/gif`, `image/png`, or `image/jpeg`."
                    },
                    "gender": {
                      "type": "string",
                      "description": "Gender. Valid options: unspecified (default), male, female."
                    },
                    "birthdate": {
                      "type": "string",
                      "description": "Birth dateTo date in format \"YYYY-MM-DD\"."
                    },
                    "biography": {
                      "type": "string",
                      "description": "A paragraph a user can submit about themselves."
                    },
                    "city": {
                      "type": "string",
                      "description": "Person's supplied city."
                    },
                    "country_code": {
                      "type": "string",
                      "description": "Alpha2 code (two letters) from ISO 3166 list."
                    },
                    "recommended": {
                      "type": "boolean",
                      "description": "Sets the post to recommended. Available only to admins and product accounts."
                    }
                  }
                }
              },
              "required": [
                "product",
                "person"
              ]
            }
          }
        }
      },
      "PostCommentReportCreateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "post_comment_report": {
                  "type": "object",
                  "properties": {
                    "post_comment_id": {
                      "type": "integer",
                      "description": "The id of the post comment being reported."
                    },
                    "reason": {
                      "type": "string",
                      "description": "The reason given by the user for reporting the post comment."
                    }
                  },
                  "required": [
                    "post_comment_id"
                  ]
                }
              },
              "required": [
                "post_comment_report"
              ]
            }
          }
        }
      },
      "PostCommentReportUpdateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "post_comment_report": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "The new status. Valid statuses are \"pending\", \"no_action_needed\", \"comment_hidden\""
                    }
                  },
                  "required": [
                    "status"
                  ]
                }
              },
              "required": [
                "post_comment_report"
              ]
            }
          }
        }
      },
      "PostCommentCreateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "post_comment": {
                  "type": "object",
                  "properties": {
                    "body": {
                      "type": "string",
                      "description": "The body of the comment."
                    }
                  },
                  "required": [
                    "body"
                  ]
                },
                "mentions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "person_id": {
                        "type": "integer",
                        "description": "The id of the person mentioned."
                      },
                      "location": {
                        "type": "integer",
                        "description": "Where the mention text starts in the comment."
                      },
                      "length": {
                        "type": "integer",
                        "description": "The length of the mention text."
                      }
                    },
                    "required": [
                      "person_id",
                      "location",
                      "length"
                    ]
                  }
                }
              },
              "required": [
                "post_comment"
              ]
            }
          }
        }
      },
      "ActionTypeCreateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "action_type": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Display friendly name of the action type."
                    },
                    "internal_name": {
                      "type": "string",
                      "description": "Internal name of the action type."
                    },
                    "seconds_lag": {
                      "type": "integer",
                      "description": "Delay between each action before it will count towards progression."
                    },
                    "active": {
                      "type": "boolean",
                      "description": "Determines if the action is actively being used in the apps."
                    }
                  },
                  "required": [
                    "name",
                    "internal_name"
                  ]
                }
              },
              "required": [
                "action_type"
              ]
            }
          }
        }
      },
      "ActionTypeUpdateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "action_type": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Display friendly name of the action type."
                    },
                    "internal_name": {
                      "type": "string",
                      "description": "Internal name of the action type."
                    },
                    "seconds_lag": {
                      "type": "integer",
                      "description": "Delay between each action before it will count towards progression."
                    },
                    "active": {
                      "type": "boolean",
                      "description": "Determines if the action is actively being used in the apps."
                    }
                  }
                }
              },
              "required": [
                "action_type"
              ]
            }
          }
        }
      },
      "TypeBodyCreate": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "activity_type": {
                  "type": "object",
                  "properties": {
                    "atype": {
                      "type": "string",
                      "description": "Activity Type. Valid types are beacon, post, image, audio, activity_code."
                    },
                    "value": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "This field is used as an identifier for determining completion criteria of the atype. ID for Product Beacons, Unlock code for activity code, hashtag for post."
                        },
                        "description": {
                          "type": "string",
                          "description": "This field is used as a display field for the end user."
                        }
                      }
                    }
                  },
                  "required": [
                    "atype",
                    "value"
                  ]
                }
              },
              "required": [
                "activity_type"
              ]
            }
          }
        }
      },
      "TypeBodyUpdate": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "activity_type": {
                  "type": "object",
                  "properties": {
                    "atype": {
                      "type": "string",
                      "description": "Activity Type. Valid types are beacon, post, image, audio, activity_code."
                    },
                    "value": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "This field is used as an identifier for determining completion criteria of the atype. ID for Product Beacons, Unlock code for activity code, hashtag for post."
                        },
                        "description": {
                          "type": "string",
                          "description": "This field is used as a display field for the end user."
                        }
                      }
                    }
                  }
                }
              },
              "required": [
                "activity_type"
              ]
            }
          }
        }
      },
      "PostCreateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "post": {
                  "type": "object",
                  "properties": {
                    "body": {
                      "type": "string",
                      "description": "The body of the message."
                    },
                    "picture": {
                      "type": "string",
                      "format": "binary",
                      "description": "Post picture, this should be `image/gif`, `image/png`, or `image/jpeg`."
                    },
                    "audio": {
                      "type": "string",
                      "format": "binary",
                      "description": "Post audio, this should be `audio/acc`."
                    },
                    "global": {
                      "type": "boolean",
                      "description": "Whether the post is global (seen by all users)."
                    },
                    "starts_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When the post should start being visible (same format as in responses)."
                    },
                    "ends_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": " When the post should stop being visible (same format as in responses)."
                    },
                    "repost_interval": {
                      "type": "integer",
                      "description": "How often this post should be republished."
                    },
                    "status": {
                      "type": "string",
                      "description": "Valid values: \"pending\", \"published\", \"deleted\", \"rejected\""
                    },
                    "priority": {
                      "type": "integer",
                      "description": "Priority value for post."
                    },
                    "recommended": {
                      "type": "boolean",
                      "description": "Whether the post is recommended.(Admin or product account)"
                    }
                  }
                }
              },
              "required": [
                "post"
              ]
            }
          }
        }
      },
      "PostUpdateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "post": {
                  "type": "object",
                  "properties": {
                    "body": {
                      "type": "string",
                      "description": "The body of the message."
                    },
                    "picture": {
                      "type": "string",
                      "format": "binary",
                      "description": "Post picture, this should be `image/gif`, `image/png`, or `image/jpeg`."
                    },
                    "audio": {
                      "type": "string",
                      "format": "binary",
                      "description": "Post audio, this should be `audio/acc`."
                    },
                    "global": {
                      "type": "boolean",
                      "description": "Whether the post is global (seen by all users)."
                    },
                    "starts_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When the post should start being visible (same format as in responses)."
                    },
                    "ends_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": " When the post should stop being visible (same format as in responses)."
                    },
                    "repost_interval": {
                      "type": "integer",
                      "description": "How often this post should be republished."
                    },
                    "status": {
                      "type": "string",
                      "description": "Valid values: \"pending\", \"published\", \"deleted\", \"rejected\""
                    },
                    "priority": {
                      "type": "integer",
                      "description": "Priority value for post."
                    },
                    "recommended": {
                      "type": "boolean",
                      "description": "Whether the post is recommended.(Admin or product account)"
                    }
                  }
                }
              },
              "required": [
                "post"
              ]
            }
          }
        }
      },
      "AssignedRewardCreateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "assign": {
                  "type": "object",
                  "properties": {
                    "reward_id": {
                      "type": "integer",
                      "description": "The ID of the reward it is being assigned to."
                    },
                    "assigned_type": {
                      "type": "string",
                      "description": "The model name that the reward belongs to."
                    },
                    "assigned_id": {
                      "type": "integer",
                      "description": "The id of the type that is being assigned. Example: If you want to assign the quest with an ID of 1, you would set the type to Quest and the id to 1."
                    },
                    "max_times": {
                      "type": "integer",
                      "default": 1,
                      "description": "The maximum number of times the assigned item can be completed for credit."
                    }
                  },
                  "required": [
                    "reward_id",
                    "assigned_type",
                    "assigned_id"
                  ]
                }
              },
              "required": [
                "assign"
              ]
            }
          }
        }
      },
      "AssignedRewardUpdateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "assign": {
                  "type": "object",
                  "properties": {
                    "max_times": {
                      "type": "integer",
                      "default": 1,
                      "description": "The maximum number of times the assigned item can be completed for credit."
                    }
                  }
                }
              },
              "required": [
                "assign"
              ]
            }
          }
        }
      },
      "BadgeActionCreate": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "badge_action": {
                  "type": "object",
                  "properties": {
                    "action_type": {
                      "type": "string",
                      "description": "Internal name of the action type."
                    },
                    "indentifier": {
                      "type": "string",
                      "description": "The indentifier for this badge action."
                    }
                  },
                  "required": [
                    "action_type"
                  ]
                }
              },
              "required": [
                "badge_action"
              ]
            }
          }
        }
      },
      "NotificationDeviceIdsForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "device_id": {
                  "type": "string",
                  "description": "ID of the device"
                }
              },
              "required": [
                "device_id"
              ]
            }
          }
        }
      },
      "PostReactionCreateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "post_reaction": {
                  "type": "object",
                  "properties": {
                    "reaction": {
                      "type": "string",
                      "description": "The identifier for the reaction. Accepts stringified hex values between 0 and 10FFFF, inclusive."
                    }
                  },
                  "required": [
                    "reaction"
                  ]
                }
              },
              "required": [
                "post_reaction"
              ]
            }
          }
        }
      },
      "PostReactionUpdateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "post_reaction": {
                  "type": "object",
                  "properties": {
                    "reaction": {
                      "type": "string",
                      "description": "The identifier for the reaction. Accepts stringified hex values between 0 and 10FFFF, inclusive."
                    }
                  }
                }
              },
              "required": [
                "post_reaction"
              ]
            }
          }
        }
      },
      "QuestCreateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "quest": {
                  "type": "object",
                  "properties": {
                    "event_id": {
                      "type": "integer",
                      "description": "The event a quest is attached to. Optional."
                    },
                    "name": {
                      "type": "object",
                      "description": "Name of the quest. Can be string or an object. Translatable."
                    },
                    "internal_name": {
                      "type": "string",
                      "description": "Internal name of the quest."
                    },
                    "description": {
                      "type": "object",
                      "description": "Description of the quest. Can be string or object. Translatable."
                    },
                    "picture": {
                      "type": "string",
                      "format": "binary",
                      "description": "Image associated with the quest."
                    },
                    "status": {
                      "type": "string",
                      "description": "Current quest status. Can be Active, Enabled, Disabled or Deleted"
                    },
                    "starts_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "String for when the quest starts."
                    },
                    "end_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "String for when the quest ends."
                    }
                  },
                  "required": [
                    "name",
                    "internal_name",
                    "description",
                    "starts_at"
                  ]
                }
              },
              "required": [
                "quest"
              ]
            }
          }
        }
      },
      "QuestUpdateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "quest": {
                  "type": "object",
                  "properties": {
                    "event_id": {
                      "type": "integer",
                      "description": "The event a quest is attached to. Optional."
                    },
                    "name": {
                      "type": "object",
                      "description": "Name of the quest. Can be string or an object. Translatable."
                    },
                    "internal_name": {
                      "type": "string",
                      "description": "Internal name of the quest."
                    },
                    "descriptio": {
                      "type": "object",
                      "description": "Description of the quest. Can be string or object. Translatable."
                    },
                    "picture": {
                      "type": "string",
                      "format": "binary",
                      "description": "Image associated with the quest."
                    },
                    "status": {
                      "type": "string",
                      "description": "Current quest status. Can be Active, Enabled, Disabled or Deleted"
                    },
                    "starts_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "String for when the quest starts."
                    },
                    "end_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "String for when the quest ends."
                    }
                  },
                  "required": [
                    "descriptio"
                  ]
                }
              },
              "required": [
                "quest"
              ]
            }
          }
        }
      },
      "PostReportsCreateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "post_report": {
                  "type": "object",
                  "properties": {
                    "post_id": {
                      "type": "integer",
                      "description": "The id of the post being reported."
                    },
                    "reason": {
                      "type": "string",
                      "description": "The reason given by the user for reporting the post."
                    }
                  },
                  "required": [
                    "post_id"
                  ]
                }
              },
              "required": [
                "post_report"
              ]
            }
          }
        }
      },
      "PostReportsUpdateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "post_report": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "The new status. Valid statuses are \"pending\", \"no_action_needed\", \"post_hidden\""
                    }
                  },
                  "required": [
                    "status"
                  ]
                }
              },
              "required": [
                "post_report"
              ]
            }
          }
        }
      },
      "StepCreateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "step": {
                  "type": "object",
                  "properties": {
                    "unlocks": {
                      "type": "array",
                      "description": "The steps that are unlocked when this step is completed. Pass as {1,2,3} for multiple steps."
                    },
                    "display": {
                      "type": "string",
                      "description": "Sets the display name for the step."
                    }
                  }
                }
              },
              "required": [
                "step"
              ]
            }
          }
        }
      },
      "StepUpdateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "step": {
                  "type": "object",
                  "properties": {
                    "unlocks": {
                      "type": "array",
                      "description": "The steps that are unlocked when this step is completed. Pass as {1,2,3} for multiple steps."
                    },
                    "display": {
                      "type": "string",
                      "description": "Sets the display name for the step."
                    }
                  }
                }
              },
              "required": [
                "step"
              ]
            }
          }
        }
      },
      "EventForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "EventUpdateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "ProductCreateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "product": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Product display name."
                    },
                    "internal_name": {
                      "type": "string",
                      "description": "Product internal name."
                    },
                    "enabled": {
                      "type": "boolean",
                      "default": false,
                      "description": "Whether or not the product is enabled."
                    }
                  },
                  "required": [
                    "name",
                    "internal_name"
                  ]
                }
              },
              "required": [
                "product"
              ]
            }
          }
        }
      },
      "ProductUpdateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "product": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Product display name."
                    },
                    "internal_name": {
                      "type": "string",
                      "description": "Product internal name."
                    },
                    "enabled": {
                      "type": "boolean",
                      "default": false,
                      "description": "Whether or not the product is enabled."
                    }
                  }
                }
              },
              "required": [
                "product"
              ]
            }
          }
        }
      },
      "RewardCreateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "reward": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Display friendly name of the reward."
                    },
                    "internal_name": {
                      "type": "string",
                      "description": "Internal name of the reward."
                    },
                    "reward_type": {
                      "type": "string",
                      "description": "What the reward provides. Currently supports badges."
                    },
                    "reward_type_id": {
                      "type": "integer",
                      "description": "The ID of the reward_type. Example: If this reward gives a badge, you would set the type to Badge and the ID to the ID of the badge it should reward."
                    },
                    "series": {
                      "type": "string",
                      "description": "The series this reward belongs to. For rewards that are awarded from actions, this is the action type internal name. For all others, it's up to the person creating the reward."
                    },
                    "completion_requirement": {
                      "type": "integer",
                      "description": "The number of completions required to unlock this reward."
                    },
                    "points": {
                      "type": "string",
                      "description": "The amount of points this reward gives towards a person's level."
                    },
                    "status": {
                      "type": "string",
                      "description": "The status of the reward. Can be active or inactive."
                    }
                  },
                  "required": [
                    "name",
                    "internal_name",
                    "reward_type",
                    "reward_type_id"
                  ]
                }
              },
              "required": [
                "reward"
              ]
            }
          }
        }
      },
      "RewardUpdateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "reward": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Display friendly name of the reward."
                    },
                    "internal_name": {
                      "type": "string",
                      "description": "Internal name of the reward."
                    },
                    "reward_type": {
                      "type": "string",
                      "description": "What the reward provides. Currently supports badges."
                    },
                    "reward_type_id": {
                      "type": "integer",
                      "description": "The ID of the reward_type. Example: If this reward gives a badge, you would set the type to Badge and the ID to the ID of the badge it should reward."
                    },
                    "series": {
                      "type": "string",
                      "description": "The series this reward belongs to. For rewards that are awarded from actions, this is the action type internal name. For all others, it's up to the person creating the reward."
                    },
                    "completion_requirement": {
                      "type": "integer",
                      "description": "The number of completions required to unlock this reward."
                    },
                    "points": {
                      "type": "string",
                      "description": "The amount of points this reward gives towards a person's level."
                    },
                    "status": {
                      "type": "string",
                      "description": "The status of the reward. Can be active or inactive."
                    }
                  },
                  "required": [
                    "name",
                    "internal_name",
                    "reward_type",
                    "reward_type_id"
                  ]
                }
              },
              "required": [
                "reward"
              ]
            }
          }
        }
      },
      "BeaconCreateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "product_beacon": {
                  "type": "object",
                  "properties": {
                    "beacon_pid": {
                      "type": "string",
                      "description": "The manufacturer's id of the beacon"
                    },
                    "uuid": {
                      "type": "string",
                      "description": "The UUID of the beacon."
                    },
                    "lower": {
                      "type": "string",
                      "description": "Lower value."
                    },
                    "upper": {
                      "type": "string",
                      "description": "Upper value."
                    },
                    "attached_to": {
                      "type": "integer",
                      "description": "The activity the beacon is attached to. Can be null."
                    }
                  },
                  "required": [
                    "beacon_pid",
                    "uuid",
                    "lower",
                    "upper"
                  ]
                }
              },
              "required": [
                "product_beacon"
              ]
            }
          }
        }
      },
      "BeaconUpdateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "product_beacon": {
                  "type": "object",
                  "properties": {
                    "beacon_pid": {
                      "type": "string",
                      "description": "The manufacturer's id of the beacon"
                    },
                    "uuid": {
                      "type": "string",
                      "description": "The UUID of the beacon."
                    },
                    "lower": {
                      "type": "string",
                      "description": "Lower value."
                    },
                    "upper": {
                      "type": "string",
                      "description": "Upper value."
                    },
                    "attached_to": {
                      "type": "integer",
                      "description": "The activity the beacon is attached to. Can be null."
                    }
                  }
                }
              },
              "required": [
                "product_beacon"
              ]
            }
          }
        }
      },
      "FollowingForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "followed_id": {
                  "type": "integer",
                  "description": "Person to follow."
                }
              },
              "required": [
                "followed_id"
              ]
            }
          }
        }
      },
      "QuestCompletionCreateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "quest_completion": {
                  "type": "object",
                  "properties": {
                    "activity_id": {
                      "type": "integer",
                      "description": "The id of the activity completed."
                    }
                  },
                  "required": [
                    "activity_id"
                  ]
                }
              },
              "required": [
                "quest_completion"
              ]
            }
          }
        }
      },
      "QuestCompletionUpdateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "quest_completion": {
                  "type": "object",
                  "properties": {
                    "activity_id": {
                      "type": "integer",
                      "description": "The id of the activity completed."
                    }
                  },
                  "required": [
                    "activity_id"
                  ]
                }
              },
              "required": [
                "quest_completion"
              ]
            }
          }
        }
      },
      "MessageCreateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "object",
                  "properties": {
                    "body": {
                      "type": "string",
                      "description": "The body of the message."
                    },
                    "picture": {
                      "type": "string",
                      "format": "binary",
                      "description": "Message picture, this should be `image/gif`, `image/png`, or `image/jpeg`."
                    },
                    "audio": {
                      "type": "string",
                      "format": "binary",
                      "description": "Message audio, this should be `audio/aac`."
                    },
                    "mentions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "person_id": {
                            "type": "integer",
                            "description": "ID of user mentioned"
                          },
                          "location": {
                            "type": "integer",
                            "description": "The location in the message body that the mention is at."
                          },
                          "length": {
                            "type": "integer",
                            "description": "The length of the users name in the mention"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "required": [
                "message"
              ]
            }
          }
        }
      },
      "MessageUpdateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "object",
                  "properties": {
                    "hidden": {
                      "type": "boolean",
                      "description": "Whether or not the item is hidden."
                    }
                  }
                }
              },
              "required": [
                "message"
              ]
            }
          }
        }
      },
      "BadgeCreateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "badge": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Display friendly name for the badge. Translatable"
                    },
                    "internal_name": {
                      "type": "string",
                      "description": "Internal name of the badge"
                    },
                    "description": {
                      "type": "string",
                      "description": "A short paragraph describing the badge. Translatable."
                    },
                    "picture": {
                      "type": "string",
                      "format": "binary",
                      "description": "Image associated with the badge."
                    },
                    "issued_from": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Start time for when the badge is available to earn."
                    },
                    "issued_to": {
                      "type": "string",
                      "format": "date-time",
                      "description": "End time for when the badge is available to earn."
                    }
                  },
                  "required": [
                    "name",
                    "internal_name",
                    "description"
                  ]
                }
              },
              "required": [
                "badge"
              ]
            }
          }
        }
      },
      "BadgeUpdateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "badge": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Display friendly name for the badge. Translatable"
                    },
                    "internal_name": {
                      "type": "string",
                      "description": "Internal name of the badge"
                    },
                    "description": {
                      "type": "string",
                      "description": "A short paragraph describing the badge. Translatable."
                    },
                    "picture": {
                      "type": "string",
                      "format": "binary",
                      "description": "Image associated with the badge."
                    },
                    "issued_from": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Start time for when the badge is available to earn."
                    },
                    "issued_to": {
                      "type": "string",
                      "format": "date-time",
                      "description": "End time for when the badge is available to earn."
                    }
                  },
                  "required": [
                    "name",
                    "internal_name",
                    "description"
                  ]
                }
              },
              "required": [
                "badge"
              ]
            }
          }
        }
      },
      "BlockCreate": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "block": {
                  "type": "object",
                  "properties": {
                    "blocked_id": {
                      "type": "integer",
                      "description": "Internal name of the action type."
                    }
                  },
                  "required": [
                    "blocked_id"
                  ]
                }
              },
              "required": [
                "block"
              ]
            }
          }
        }
      },
      "CategoryForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "category": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Category name."
                    },
                    "color": {
                      "type": "string",
                      "description": "The color hex code for the category."
                    },
                    "role": {
                      "type": "string",
                      "description": "The role the category is allowed to be used by. Supports normal, product, staff, admin, super_admin."
                    }
                  },
                  "required": [
                    "name",
                    "role"
                  ]
                }
              },
              "required": [
                "category"
              ]
            }
          }
        }
      },
      "CategoryUpdateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "category": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Category name."
                    },
                    "color": {
                      "type": "string",
                      "description": "The color hex code for the category."
                    },
                    "role": {
                      "type": "string",
                      "description": "The role the category is allowed to be used by. Supports normal, product, staff, admin, super_admin."
                    }
                  }
                }
              },
              "required": [
                "category"
              ]
            }
          }
        }
      },
      "MerchandiseForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "merchandise": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the item."
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of the item."
                    },
                    "price": {
                      "type": "integer",
                      "description": "Price of the item."
                    },
                    "picture": {
                      "type": "string",
                      "format": "binary",
                      "description": "Image associated with the item"
                    },
                    "available": {
                      "type": "boolean",
                      "default": true,
                      "description": "Is the item currently available"
                    },
                    "priority": {
                      "type": "integer",
                      "default": 0,
                      "description": "Where the item resides in the list. A number greater than 0 means the item will show up sooner in the list."
                    },
                    "purchase_url": {
                      "type": "string",
                      "description": "Where a user can purchase this item."
                    }
                  },
                  "required": [
                    "name",
                    "description",
                    "available",
                    "priority"
                  ]
                }
              },
              "required": [
                "merchandise"
              ]
            }
          }
        }
      },
      "MerchandiseUpdateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "merchandise": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the item."
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of the item."
                    },
                    "price": {
                      "type": "integer",
                      "description": "Price of the item."
                    },
                    "picture": {
                      "type": "string",
                      "format": "binary",
                      "description": "Image associated with the item"
                    },
                    "available": {
                      "type": "boolean",
                      "default": true,
                      "description": "Is the item currently available"
                    },
                    "priority": {
                      "type": "integer",
                      "default": 0,
                      "description": "Where the item resides in the list. A number greater than 0 means the item will show up sooner in the list."
                    },
                    "purchase_url": {
                      "type": "string",
                      "description": "Where a user can purchase this item."
                    }
                  }
                }
              },
              "required": [
                "merchandise"
              ]
            }
          }
        }
      },
      "MessageReportCreateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "message_report": {
                  "type": "object",
                  "properties": {
                    "message_id": {
                      "type": "integer",
                      "description": "The id of the message being reported."
                    },
                    "reason": {
                      "type": "string",
                      "description": "The reason given by the user for reporting the message."
                    }
                  },
                  "required": [
                    "message_id"
                  ]
                }
              },
              "required": [
                "message_report"
              ]
            }
          }
        }
      },
      "MessageReportUpdateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "message_report": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "The new status. Valid statuses are \"message_hidden\", \"no_action_needed\", and \"pending\"."
                    }
                  },
                  "required": [
                    "status"
                  ]
                }
              },
              "required": [
                "message_report"
              ]
            }
          }
        }
      },
      "QuestActivityCreateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "quest_activity": {
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "object",
                      "description": "Description of the activity. Translatable"
                    },
                    "hint": {
                      "type": "object",
                      "description": "A hint for completing the quest activity. Translatable."
                    },
                    "picture": {
                      "type": "string",
                      "format": "binary",
                      "description": "An image associated with the quest activity."
                    }
                  },
                  "required": [
                    "hint"
                  ]
                }
              },
              "required": [
                "quest_activity"
              ]
            }
          }
        }
      },
      "QuestActivityUpdateForm": {
        "required": true,
        "description": "",
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "quest_activity": {
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "object",
                      "description": "Description of the activity. Translatable"
                    },
                    "hint": {
                      "type": "object",
                      "description": "A hint for completing the quest activity. Translatable."
                    },
                    "picture": {
                      "type": "string",
                      "format": "binary",
                      "description": "An image associated with the quest activity."
                    }
                  }
                }
              },
              "required": [
                "quest_activity"
              ]
            }
          }
        }
      }
    },
    "responses": {
      "OK": {
        "description": "HTTP/1.1 200 Ok"
      },
      "PeopleArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "people": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "person": {
                        "$ref": "#/components/schemas/PersonJson"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PersonObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "person": {
                  "$ref": "#/components/schemas/PersonJson"
                }
              }
            }
          }
        }
      },
      "PersonPrivateObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "person": {
                  "$ref": "#/components/schemas/PersonPrivateJson"
                }
              }
            }
          }
        }
      },
      "PostCommentReportsArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "post_comment_reports": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "post_comment_report": {
                        "$ref": "#/components/schemas/PostCommentReportJson"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PostCommentsArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "post_comments": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "post_comment": {
                        "$ref": "#/components/schemas/PostCommentJson"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PostCommentsListArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "post_comments": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "post_comment": {
                        "$ref": "#/components/schemas/PostCommentListJson"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PostCommentsObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "post_comment": {
                  "$ref": "#/components/schemas/PostCommentJson"
                }
              }
            }
          }
        }
      },
      "ActionTypeObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "action": {
                  "$ref": "#/components/schemas/ActionTypeJson"
                }
              }
            }
          }
        }
      },
      "ActionTypeArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "actions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "Action": {
                        "$ref": "#/components/schemas/ActionTypeJson"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ActivityTypeObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ActivityTypeJson"
            }
          }
        }
      },
      "ActivityTypeArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "types": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityTypeJson"
                  }
                }
              }
            }
          }
        }
      },
      "PostsArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "posts": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "post": {
                        "$ref": "#/components/schemas/PostJson"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PostsListsArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "posts": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "post": {
                        "$ref": "#/components/schemas/PostListJson"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PostsObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "post": {
                  "$ref": "#/components/schemas/PostJson"
                }
              }
            }
          }
        }
      },
      "PostsShareObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "post": {
                  "$ref": "#/components/schemas/PostShareJson"
                }
              }
            }
          }
        }
      },
      "AssignedRewardObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "assigned": {
                  "$ref": "#/components/schemas/AssignedRewardJson"
                }
              }
            }
          }
        }
      },
      "AssignedRewardArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "assignees": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "assigned": {
                        "$ref": "#/components/schemas/AssignedRewardJson"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "BadgeActionsPending": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "pending_badge": {
                  "type": "object",
                  "properties": {
                    "badge_action_count": {
                      "type": "integer"
                    },
                    "badge": {
                      "$ref": "#/components/schemas/BadgeJson"
                    }
                  }
                },
                "badges_awarded": {
                  "type": "object",
                  "properties": {
                    "badge": {
                      "$ref": "#/components/schemas/BadgeJson"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "TagArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "posts": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "post": {
                        "$ref": "#/components/schemas/PostJson"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PostReactionsArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "post_reactions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "post_reaction": {
                        "$ref": "#/components/schemas/PostReactionJson"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PostReactionsObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "post_reaction": {
                  "$ref": "#/components/schemas/PostReactionJson"
                }
              }
            }
          }
        }
      },
      "QuestObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "quest": {
                  "$ref": "#/components/schemas/QuestJson"
                }
              }
            }
          }
        }
      },
      "QuestsArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "quests": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "quest": {
                        "$ref": "#/components/schemas/QuestJson"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PostReportsObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "post_report": {
                  "$ref": "#/components/schemas/PostReportJson"
                }
              }
            }
          }
        }
      },
      "PostReportsArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "post_reports": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "post_report": {
                        "$ref": "#/components/schemas/PostReportJson"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "RelationshipsObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "relationship": {
                  "$ref": "#/components/schemas/RelationshipJson"
                }
              }
            }
          }
        }
      },
      "RelationshipsArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "relationships": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "relationship": {
                        "$ref": "#/components/schemas/RelationshipJson"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "StepObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "step": {
                  "$ref": "#/components/schemas/StepJson"
                }
              }
            }
          }
        }
      },
      "Array": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "steps": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "step": {
                        "$ref": "#/components/schemas/StepJson"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "EventsArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "events": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "event": {
                        "$ref": "#/components/schemas/EventJson"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "EventsObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "event": {
                  "$ref": "#/components/schemas/EventJson"
                }
              }
            }
          }
        }
      },
      "SessionObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "person": {
                  "$ref": "#/components/schemas/PersonJson"
                }
              }
            }
          }
        }
      },
      "ProductObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "product": {
                  "$ref": "#/components/schemas/ProductJson"
                }
              }
            }
          }
        }
      },
      "ProductArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "products": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "product": {
                        "$ref": "#/components/schemas/ProductJson"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "RewardObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "reward": {
                  "$ref": "#/components/schemas/RewardJson"
                }
              }
            }
          }
        }
      },
      "RewardArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "rewards": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "reward": {
                        "$ref": "#/components/schemas/RewardJson"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ProductBeaconObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "beacon": {
                  "$ref": "#/components/schemas/ProductBeaconJson"
                }
              }
            }
          }
        }
      },
      "ProductBeaconArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "beacons": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "beacon": {
                        "$ref": "#/components/schemas/ProductBeaconJson"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "RecommendedPostsArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "posts": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "post": {
                        "$ref": "#/components/schemas/PostJson"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "FollowingsArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "followings": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "following": {
                        "$ref": "#/components/schemas/FollowingJson"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "FollowersArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "followers": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "follower": {
                        "$ref": "#/components/schemas/FollowingJson"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "FollowingObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "following": {
                  "$ref": "#/components/schemas/FollowingJson"
                }
              }
            }
          }
        }
      },
      "QuestCompletionObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "completion": {
                  "$ref": "#/components/schemas/QuestCompletionJson"
                }
              }
            }
          }
        }
      },
      "QuestCompletionArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "completions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "completion": {
                        "$ref": "#/components/schemas/QuestCompletionJson"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "RecommendedPeopleArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "people": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "person": {
                        "$ref": "#/components/schemas/PersonJson"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "RoomsObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "room": {
                  "$ref": "#/components/schemas/RoomJson"
                }
              }
            }
          }
        }
      },
      "RoomsArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "rooms": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "room": {
                        "$ref": "#/components/schemas/RoomJson"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "MessagesArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "messages": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "$ref": "#/components/schemas/MessageJson"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "MessagesObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "$ref": "#/components/schemas/MessageJson"
                }
              }
            }
          }
        }
      },
      "BadgesArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "badges": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "badge": {
                        "$ref": "#/components/schemas/BadgeJson"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "BadgesObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "badge": {
                  "$ref": "#/components/schemas/BadgeJson"
                }
              }
            }
          }
        }
      },
      "BlocksObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "block": {
                  "$ref": "#/components/schemas/BlockJson"
                }
              }
            }
          }
        }
      },
      "CategoryObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "category": {
                  "$ref": "#/components/schemas/CategoryJson"
                }
              }
            }
          }
        }
      },
      "CategoryArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "categories": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "$ref": "#/components/schemas/CategoryJson"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "LevelsArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "levels": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "level": {
                        "$ref": "#/components/schemas/LevelJson"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "MerchandiseArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "merchandise": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "merchandise": {
                        "$ref": "#/components/schemas/MerchandiseJson"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "MerchandiseObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "merchandise": {
                  "$ref": "#/components/schemas/MerchandiseJson"
                }
              }
            }
          }
        }
      },
      "MessageReportsArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message_reports": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "message_report": {
                        "$ref": "#/components/schemas/MessageReportJson"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "QuestActivityObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "activity": {
                  "$ref": "#/components/schemas/QuestActivityJson"
                }
              }
            }
          }
        }
      },
      "QuestActivityArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "activities": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "activity": {
                        "$ref": "#/components/schemas/QuestActivityJson"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}