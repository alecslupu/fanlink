{
  "openapi": "3.0.0",
  "info": {
    "title": "Fanlink API",
    "description": "API documentation of Rails Application. <br/>Optional multiline or single-line Markdown-formatted description in [CommonMark](http://spec.commonmark.org/) or `HTML`.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.fan.link",
      "description": "Production server"
    },
    {
      "url": "http://staging.fan.link",
      "description": "Staging server"
    },
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    }
  ],
  "tags": [
    {
      "name": "BadgeActions",
      "description": "Badge Actions"
    },
    {
      "name": "Badges",
      "description": "Badges"
    },
    {
      "name": "Base"
    },
    {
      "name": "Blocks",
      "description": "Block a person"
    },
    {
      "name": "Events",
      "description": "Events"
    },
    {
      "name": "Followings",
      "description": "Followers and following"
    },
    {
      "name": "Levels",
      "description": "Levels"
    },
    {
      "name": "Merchandise",
      "description": "Product Merchandise"
    },
    {
      "name": "MessageReports",
      "description": "Message Reports"
    },
    {
      "name": "Messages",
      "description": "Messages"
    },
    {
      "name": "NotificationDeviceIds",
      "description": "Notification Device IDs"
    },
    {
      "name": "PasswordResets",
      "description": "Password Reset"
    },
    {
      "name": "People",
      "description": "Users"
    },
    {
      "name": "PostCommentReports",
      "description": "Reported comments on posts"
    },
    {
      "name": "PostComments",
      "description": "Comments on a post"
    },
    {
      "name": "PostReactions",
      "description": "User reactions to a post"
    },
    {
      "name": "PostReports",
      "description": "Posts reported by a user"
    },
    {
      "name": "Posts",
      "description": "User/product posts"
    },
    {
      "name": "RecommendedPeople",
      "description": "Recommended People"
    },
    {
      "name": "RecommendedPosts",
      "description": "Recommended posts"
    },
    {
      "name": "Relationships",
      "description": "User's relationships"
    },
    {
      "name": "RoomMemberships",
      "description": "What rooms a user belongs to."
    },
    {
      "name": "Rooms",
      "description": "Chat rooms"
    },
    {
      "name": "Session",
      "description": "User session management."
    }
  ],
  "paths": {
    "/badge_actions": {
      "post": {
        "summary": "POST create a badge action",
        "operationId": "BadgeActions_create",
        "tags": [
          "BadgeActions"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "badge_action": {
                    "type": "object",
                    "properties": {
                      "action_type": {
                        "type": "string",
                        "description": "Internal name of the action type."
                      },
                      "indentifier": {
                        "type": "string",
                        "description": "The indentifier for this badge action."
                      }
                    },
                    "required": [
                      "action_type"
                    ]
                  }
                },
                "required": [
                  "badge_action"
                ]
              }
            }
          }
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/BadgeActionsPending"
          },
          "429": {
            "description": "Not enough time since last submission of this action type or duplicate action type, person, identifier combination"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/badges": {
      "get": {
        "summary": "Get badges",
        "operationId": "Badges_index",
        "tags": [
          "Badges"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "person_id",
            "in": "query",
            "required": false,
            "description": "The id of the person whose badges you want.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/BadgesArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/blocks": {
      "post": {
        "description": "This is used to block a person. When a person is blocked, any followings and relationships are immediately removed between the users.",
        "summary": "POST Block a person",
        "operationId": "Blocks_create",
        "tags": [
          "Blocks"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "block": {
                    "type": "object",
                    "properties": {
                      "blocked_id": {
                        "type": "integer",
                        "description": "Internal name of the action type."
                      }
                    },
                    "required": [
                      "blocked_id"
                    ]
                  }
                },
                "required": [
                  "block"
                ]
              }
            }
          }
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/BlocksObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/blocks/{id}": {
      "delete": {
        "summary": "POST Unblock a person",
        "operationId": "Blocks_destroy",
        "tags": [
          "Blocks"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          }
        }
      }
    },
    "/events": {
      "get": {
        "summary": "Get all events for a product",
        "operationId": "Events_index",
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "from_date",
            "in": "query",
            "required": false,
            "description": "Only include events starting on or after date in format \"YYYY-MM-DD\". Note valid dates start from 2017-01-01.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to_date",
            "in": "query",
            "required": false,
            "description": "Only include events starting on or before date in format \"YYYY-MM-DD\". Note valid dates start from 2017-01-01.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/EventsArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/events/{id}": {
      "get": {
        "summary": "Get a single event by id",
        "operationId": "Events_show",
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/EventsObject"
          }
        }
      }
    },
    "/followings": {
      "get": {
        "description": "This is used to get a list of someone's followers or followed. If followed_id parameter is supplied, it will get the follower's of that user. If follower_id is supplied, it will get the people that person is following. If nothing is supplied it will get the people the current user is following.",
        "summary": "Get followers or followings of a user.",
        "operationId": "Followings_index",
        "tags": [
          "Followings"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "followed_id",
            "in": "query",
            "required": false,
            "description": "Person to who's followers to get.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "follower_id",
            "in": "query",
            "required": false,
            "description": "Id of person who is following the people in the list we are getting.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/FollowersArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "post": {
        "description": "This is used to follow a person.",
        "summary": "Follow a person.",
        "operationId": "Followings_create",
        "tags": [
          "Followings"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "followed_id": {
                    "type": "integer",
                    "description": "Person to follow."
                  }
                },
                "required": [
                  "followed_id"
                ]
              }
            }
          }
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/FollowingObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/followings/{id}": {
      "delete": {
        "description": "This is used to unfollow a person.",
        "summary": "Unfollow a person.",
        "operationId": "Followings_destroy",
        "tags": [
          "Followings"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          }
        }
      }
    },
    "/levels": {
      "get": {
        "description": "This gets a list of all levels available to be obtained.",
        "summary": "Get all available levels.",
        "operationId": "Levels_index",
        "tags": [
          "Levels"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/LevelsArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/merchandise": {
      "get": {
        "description": " This gets a list of merchandise, in priority order.",
        "summary": "Get available merchandise.",
        "operationId": "Merchandise_index",
        "tags": [
          "Merchandise"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MerchandiseArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/merchandise/{id}": {
      "get": {
        "description": "This gets a single piece of merchandise for a merchandise id.",
        "summary": "Get a single piece of merchandise.",
        "operationId": "Merchandise_show",
        "tags": [
          "Merchandise"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id."
          },
          "200": {
            "$ref": "#/components/responses/MerchandiseObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/message_reports": {
      "get": {
        "summary": "Get list of messages reports (ADMIN).",
        "operationId": "MessageReports_index",
        "tags": [
          "MessageReports"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "status_filter",
            "in": "query",
            "required": false,
            "description": "If provided, valid values are \"message_hidden\", \"no_action_needed\", and \"pending\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/MessageReportsArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/message_reports/{id}": {
      "patch": {
        "description": "This updates a message report. The only value that can be changed is the status.",
        "summary": "Update a Message Report. (Admin)",
        "operationId": "MessageReports_update",
        "tags": [
          "MessageReports"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "message_report": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "description": "The new status. Valid statuses are \"message_hidden\", \"no_action_needed\", and \"pending\"."
                      }
                    },
                    "required": [
                      "status"
                    ]
                  }
                },
                "required": [
                  "message_report"
                ]
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "put": {
        "description": "This updates a message report. The only value that can be changed is the status.",
        "summary": "Update a Message Report. (Admin)",
        "operationId": "MessageReports_update",
        "tags": [
          "MessageReports"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "message_report": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "description": "The new status. Valid statuses are \"message_hidden\", \"no_action_needed\", and \"pending\"."
                      }
                    },
                    "required": [
                      "status"
                    ]
                  }
                },
                "required": [
                  "message_report"
                ]
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/messages": {
      "get": {
        "description": " This gets a list of messages without regard to room (with possible exception of room filter).",
        "summary": "Get a list of messages without regard to room (ADMIN ONLY).",
        "operationId": "Messages_list",
        "tags": [
          "Messages"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "id_filter",
            "in": "query",
            "required": false,
            "description": "Full match on Message id.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "person_filter",
            "in": "query",
            "required": false,
            "description": "Full or partial match on person username.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "room_id_filter",
            "in": "query",
            "required": false,
            "description": "Full match on Room id.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "body_filter",
            "in": "query",
            "required": false,
            "description": "Full or partial match on message body.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reported_filter",
            "in": "query",
            "required": false,
            "description": "Filter on whether the message has been reported.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/MessagesArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/messages/{id}": {
      "patch": {
        "description": "This updates a message in a room. Only the hidden field can be changed and only by an admin. If the item is hidden, Firebase will be updated to inform the app that the message has been hidden.",
        "summary": "Update a message",
        "operationId": "Messages_update",
        "tags": [
          "Messages"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "room_id",
            "in": "path",
            "required": true,
            "description": "ID of the room the message belongs to.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "object",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "description": "Whether or not the item is hidden."
                      }
                    }
                  }
                },
                "required": [
                  "message"
                ]
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/MessagesObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "put": {
        "description": "This updates a message in a room. Only the hidden field can be changed and only by an admin. If the item is hidden, Firebase will be updated to inform the app that the message has been hidden.",
        "summary": "Update a message",
        "operationId": "Messages_update",
        "tags": [
          "Messages"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "room_id",
            "in": "path",
            "required": true,
            "description": "ID of the room the message belongs to.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "object",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "description": "Whether or not the item is hidden."
                      }
                    }
                  }
                },
                "required": [
                  "message"
                ]
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/MessagesObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/notification_device_ids": {
      "post": {
        "description": "This adds a new device id to be used for notifications to the Firebase Cloud Messaging Service. A user can have any number of device ids.",
        "summary": "Add a new device id for a person.",
        "operationId": "NotificationDeviceIds_create",
        "tags": [
          "NotificationDeviceIds"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "device_id": {
                    "type": "string",
                    "description": "ID of the device"
                  }
                },
                "required": [
                  "device_id"
                ]
              }
            }
          }
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "delete": {
        "description": "This deletes a single device id. Can only be called by the owner.",
        "summary": "Delete a device id",
        "operationId": "NotificationDeviceIds_destroy",
        "tags": [
          "NotificationDeviceIds"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          }
        }
      }
    },
    "/people": {
      "get": {
        "description": "This is used to get a list of people.",
        "summary": "Get a list of people.",
        "operationId": "People_index",
        "tags": [
          "People"
        ],
        "parameters": [
          {
            "name": "username_filter",
            "in": "query",
            "required": false,
            "description": "A username or username fragment to filter on.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email_filter",
            "in": "query",
            "required": false,
            "description": "An email or email fragment to filter on.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PeopleArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "post": {
        "description": "This is used to create a new person.\\nIf the account creation is successful, they will be logged in and we will send an onboarding email (if we have an email address for them).",
        "summary": "Create person.",
        "operationId": "People_create",
        "tags": [
          "People"
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "product": {
                    "type": "string",
                    "description": "Internal name of the product."
                  },
                  "person": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "format": "email",
                        "description": "Email address (required unless using FB auth token)."
                      },
                      "facebook_auth_token": {
                        "type": "string",
                        "description": "Auth token from Facebook"
                      },
                      "name": {
                        "type": "string",
                        "description": "User's name."
                      },
                      "username": {
                        "type": "string",
                        "description": "Username. This needs to be unique within product scope."
                      },
                      "password": {
                        "type": "string",
                        "format": "password",
                        "description": "User\\s password."
                      },
                      "picture": {
                        "type": "string",
                        "format": "binary",
                        "description": "Profile picture, this should be `image/gif`, `image/png`, or `image/jpeg`."
                      },
                      "gender": {
                        "type": "string",
                        "description": "Gender. Valid options: unspecified (default), male, female."
                      },
                      "birthdate": {
                        "type": "string",
                        "description": "Birth dateTo date in format \"YYYY-MM-DD\"."
                      },
                      "city": {
                        "type": "string",
                        "description": "Person's supplied city."
                      },
                      "country_code": {
                        "type": "string",
                        "description": "Alpha2 code (two letters) from ISO 3166 list."
                      }
                    },
                    "required": [
                      "email",
                      "facebook_auth_token",
                      "username",
                      "password"
                    ]
                  }
                },
                "required": [
                  "product",
                  "person"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/PersonObject"
          }
        }
      }
    },
    "/people/password_forgot": {
      "post": {
        "description": "This is used to initiate a password reset. Product and email or username required. If email or username is not found, password reset will fail silently.",
        "summary": "Initiate a password reset.",
        "operationId": "PasswordResets_create",
        "tags": [
          "PasswordResets"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "product": {
                    "type": "string",
                    "description": "Internal name of product."
                  },
                  "email_or_username": {
                    "type": "string",
                    "description": "The person's email or username."
                  }
                },
                "required": [
                  "product",
                  "email_or_username"
                ]
              }
            }
          }
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "description": "HTTP/1.1 200 Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "default": "Reset password instructions have been sent to your email, if it exists in our system."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/people/recommended": {
      "get": {
        "description": "This is used to get a list of people flagged as \"recommended\". It excludes the current user and anyone the current user is following.",
        "summary": "Get recommended people.",
        "operationId": "RecommendedPeople_index",
        "tags": [
          "RecommendedPeople"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RecommendedPeopleArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/people/{id}": {
      "get": {
        "description": "This is used to get a person.",
        "summary": "Get a person.",
        "operationId": "People_show",
        "tags": [
          "People"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PersonObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "patch": {
        "description": "This is used to update a person. Anything not mentioned is left alone.",
        "summary": "Update person.",
        "operationId": "People_update",
        "tags": [
          "People"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "recommended": {
                    "type": "boolean",
                    "description": "Whether this is a recommended persion. (Admin or product account only)"
                  },
                  "person": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "format": "email",
                        "description": "Email address (required unless using FB auth token)."
                      },
                      "name": {
                        "type": "string",
                        "description": "User's name."
                      },
                      "username": {
                        "type": "string",
                        "description": "Username. This needs to be unique within product scope."
                      },
                      "picture": {
                        "type": "string",
                        "format": "binary",
                        "description": "Profile picture, this should be `image/gif`, `image/png`, or `image/jpeg`."
                      },
                      "gender": {
                        "type": "string",
                        "description": "Gender. Valid options: unspecified (default), male, female."
                      },
                      "birthdate": {
                        "type": "string",
                        "description": "Birth dateTo date in format \"YYYY-MM-DD\"."
                      },
                      "city": {
                        "type": "string",
                        "description": "Person's supplied city."
                      },
                      "country_code": {
                        "type": "string",
                        "description": "Alpha2 code (two letters) from ISO 3166 list."
                      }
                    }
                  }
                },
                "required": [
                  "person"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/PersonObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "put": {
        "description": "This is used to update a person. Anything not mentioned is left alone.",
        "summary": "Update person.",
        "operationId": "People_update",
        "tags": [
          "People"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "recommended": {
                    "type": "boolean",
                    "description": "Whether this is a recommended persion. (Admin or product account only)"
                  },
                  "person": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "format": "email",
                        "description": "Email address (required unless using FB auth token)."
                      },
                      "name": {
                        "type": "string",
                        "description": "User's name."
                      },
                      "username": {
                        "type": "string",
                        "description": "Username. This needs to be unique within product scope."
                      },
                      "picture": {
                        "type": "string",
                        "format": "binary",
                        "description": "Profile picture, this should be `image/gif`, `image/png`, or `image/jpeg`."
                      },
                      "gender": {
                        "type": "string",
                        "description": "Gender. Valid options: unspecified (default), male, female."
                      },
                      "birthdate": {
                        "type": "string",
                        "description": "Birth dateTo date in format \"YYYY-MM-DD\"."
                      },
                      "city": {
                        "type": "string",
                        "description": "Person's supplied city."
                      },
                      "country_code": {
                        "type": "string",
                        "description": "Alpha2 code (two letters) from ISO 3166 list."
                      }
                    }
                  }
                },
                "required": [
                  "person"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/PersonObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/people/{id}/change_password": {
      "patch": {
        "description": "This is used to change the logged in user's password.",
        "summary": "Change your password.",
        "operationId": "People_change_password",
        "tags": [
          "People"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The person id.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "person": {
                    "type": "object",
                    "properties": {
                      "current_password": {
                        "type": "string",
                        "description": "Current password."
                      },
                      "new_password": {
                        "type": "string",
                        "description": "New password."
                      }
                    },
                    "required": [
                      "current_password"
                    ]
                  }
                },
                "required": [
                  "person"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          }
        }
      }
    },
    "/post_comment_reports": {
      "get": {
        "description": "This gets a list of post comment reports with optional filter.",
        "summary": "Get list of post comment reports (ADMIN).",
        "operationId": "PostCommentReports_index",
        "tags": [
          "PostCommentReports"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "status_filter",
            "in": "query",
            "required": false,
            "description": "If provided, valid values are \"pending\", \"no_action_needed\", and \"comment_hidden\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/PostCommentReportsArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "post": {
        "description": "This reports a post comment.",
        "summary": "Report a post comment.",
        "operationId": "PostCommentReports_create",
        "tags": [
          "PostCommentReports"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "post_comment_report": {
                    "type": "object",
                    "properties": {
                      "post_comment_id": {
                        "type": "integer",
                        "description": "The id of the post comment being reported."
                      },
                      "reason": {
                        "type": "string",
                        "description": "The reason given by the user for reporting the post comment."
                      }
                    },
                    "required": [
                      "post_comment_id"
                    ]
                  }
                },
                "required": [
                  "post_comment_report"
                ]
              }
            }
          }
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/post_comment_reports/{id}": {
      "patch": {
        "description": "This updates a post comment report. The only value that can be changed is the status.",
        "summary": "Update a Post Comment Report (Admin)",
        "operationId": "PostCommentReports_update",
        "tags": [
          "PostCommentReports"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "post_comment_report": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "description": "The new status. Valid statuses are \"pending\", \"no_action_needed\", \"comment_hidden\""
                      }
                    },
                    "required": [
                      "status"
                    ]
                  }
                },
                "required": [
                  "post_comment_report"
                ]
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "put": {
        "description": "This updates a post comment report. The only value that can be changed is the status.",
        "summary": "Update a Post Comment Report (Admin)",
        "operationId": "PostCommentReports_update",
        "tags": [
          "PostCommentReports"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "post_comment_report": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "description": "The new status. Valid statuses are \"pending\", \"no_action_needed\", \"comment_hidden\""
                      }
                    },
                    "required": [
                      "status"
                    ]
                  }
                },
                "required": [
                  "post_comment_report"
                ]
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/post_comments/list": {
      "get": {
        "description": "This gets a list of post comments with optional filters and pagination.",
        "summary": "Get a list of post comments (ADMIN).",
        "operationId": "PostComments_list",
        "tags": [
          "PostComments"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "body_filter",
            "in": "query",
            "required": false,
            "description": "Full or partial match on comment body.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "person_filter",
            "in": "query",
            "required": false,
            "description": "Full or partial match on person username or email.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/PostCommentsListArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/post_reports": {
      "get": {
        "description": "This gets a list of post reports with optional filter.",
        "summary": "Get list of post reports (ADMIN).",
        "operationId": "PostReports_index",
        "tags": [
          "PostReports"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "status_filter",
            "in": "query",
            "required": false,
            "description": "If provided, valid values are \"pending\", \"no_action_needed\", and \"post_hidden\"",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/PostReportsArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "post": {
        "description": "This reports a post that was posted to a feed.",
        "summary": "Report a post.",
        "operationId": "PostReports_create",
        "tags": [
          "PostReports"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "post_report": {
                    "type": "object",
                    "properties": {
                      "post_id": {
                        "type": "integer",
                        "description": "The id of the post being reported."
                      },
                      "reason": {
                        "type": "string",
                        "description": "The reason given by the user for reporting the post."
                      }
                    },
                    "required": [
                      "post_id"
                    ]
                  }
                },
                "required": [
                  "post_report"
                ]
              }
            }
          }
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/post_reports/{id}": {
      "patch": {
        "description": "This updates a post report. The only value that can be changed is the status.",
        "summary": "Update a Post Report.",
        "operationId": "PostReports_update",
        "tags": [
          "PostReports"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "post_report": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "description": "The new status. Valid statuses are \"pending\", \"no_action_needed\", \"post_hidden\""
                      }
                    },
                    "required": [
                      "status"
                    ]
                  }
                },
                "required": [
                  "post_report"
                ]
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "put": {
        "description": "This updates a post report. The only value that can be changed is the status.",
        "summary": "Update a Post Report.",
        "operationId": "PostReports_update",
        "tags": [
          "PostReports"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "post_report": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "description": "The new status. Valid statuses are \"pending\", \"no_action_needed\", \"post_hidden\""
                      }
                    },
                    "required": [
                      "status"
                    ]
                  }
                },
                "required": [
                  "post_report"
                ]
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/posts": {
      "get": {
        "description": "  This gets a list of posts for a from date, to date, with an optional limit and person. Posts are returned newest first, and the limit is applied to that ordering.\n    Posts included are posts from the passed in person or, if none, the current\n    user along with those of the users the current user is following.",
        "summary": "Get posts for a date range.",
        "operationId": "Posts_index",
        "tags": [
          "Posts"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "person_id",
            "in": "query",
            "required": false,
            "description": "The person whose posts to get. If not supplied, posts from current user plus those from people the current user is following will be returned.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "from_date",
            "in": "query",
            "required": false,
            "description": "From date in format \"YYYY-MM-DD\". Note valid dates start from 2017-01-01.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "to_date",
            "in": "query",
            "required": false,
            "description": "To date in format \"YYYY-MM-DD\". Note valid dates start from 2017-01-01.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/PostsArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "post": {
        "description": "This creates a post and puts in on the feed of the author's followers. It also sends a push notification to poster's followers if the notify_followers flag is set to true.",
        "summary": "Create a post.",
        "operationId": "Posts_create",
        "tags": [
          "Posts"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "post": {
                    "type": "object",
                    "properties": {
                      "body": {
                        "type": "string",
                        "description": "The body of the message."
                      },
                      "picture": {
                        "type": "string",
                        "format": "binary",
                        "description": "Post picture, this should be `image/gif`, `image/png`, or `image/jpeg`."
                      },
                      "audio": {
                        "type": "string",
                        "format": "binary",
                        "description": "Post audio, this should be `audio/acc`."
                      },
                      "global": {
                        "type": "boolean",
                        "description": "Whether the post is global (seen by all users)."
                      },
                      "starts_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "When the post should start being visible (same format as in responses)."
                      },
                      "ends_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": " When the post should stop being visible (same format as in responses)."
                      },
                      "repost_interval": {
                        "type": "integer",
                        "description": "How often this post should be republished."
                      },
                      "status": {
                        "type": "string",
                        "description": "Valid values: \"pending\", \"published\", \"deleted\", \"rejected\""
                      },
                      "priority": {
                        "type": "integer",
                        "description": "Priority value for post."
                      },
                      "recommended": {
                        "type": "boolean",
                        "description": "Whether the post is recommended.(Admin or product account)"
                      }
                    }
                  }
                },
                "required": [
                  "post"
                ]
              }
            }
          }
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/PostsObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/posts/list": {
      "get": {
        "description": "This gets a list of posts with optional filters and pagination.",
        "summary": "Get a list of posts (ADMIN ONLY).",
        "operationId": "Posts_list",
        "tags": [
          "Posts"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "id_filter",
            "in": "query",
            "required": false,
            "description": "Full match on post.id. Will return either a one element array or an empty array.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "person_id_filter",
            "in": "query",
            "required": false,
            "description": "Full match on person id.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "person_filter",
            "in": "query",
            "required": false,
            "description": "Full or partial match on person username or email.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "body_filter",
            "in": "query",
            "required": false,
            "description": "Full or partial match on post body.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "posted_after_filter",
            "in": "query",
            "required": false,
            "description": "Posted at or after timestamp. Format: \"2018-01-08T12:13:42Z\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "posted_before_filter",
            "in": "query",
            "required": false,
            "description": "Posted at or before timestamp. Format: \"2018-01-08T12:13:42Z\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status_filter",
            "in": "query",
            "required": false,
            "description": "Post status. Valid values: pending published deleted rejected errored",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/PostsListsArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/posts/recommended": {
      "get": {
        "description": "This is used to get a list of published posts flagged as \"recommended\".",
        "summary": "Get recommended posts.",
        "operationId": "RecommendedPosts_index",
        "tags": [
          "RecommendedPosts"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/RecommendedPostsArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/posts/{id}": {
      "get": {
        "description": "This gets a single post for a post id.",
        "summary": "Get a single post.",
        "operationId": "Posts_show",
        "tags": [
          "Posts"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/PostsObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "patch": {
        "description": "This updates a post.",
        "summary": "Update a post",
        "operationId": "Posts_update",
        "tags": [
          "Posts"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "post": {
                    "type": "object",
                    "properties": {
                      "body": {
                        "type": "string",
                        "description": "The body of the message."
                      },
                      "picture": {
                        "type": "string",
                        "format": "binary",
                        "description": "Post picture, this should be `image/gif`, `image/png`, or `image/jpeg`."
                      },
                      "audio": {
                        "type": "string",
                        "format": "binary",
                        "description": "Post audio, this should be `audio/acc`."
                      },
                      "global": {
                        "type": "boolean",
                        "description": "Whether the post is global (seen by all users)."
                      },
                      "starts_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "When the post should start being visible (same format as in responses)."
                      },
                      "ends_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": " When the post should stop being visible (same format as in responses)."
                      },
                      "repost_interval": {
                        "type": "integer",
                        "description": "How often this post should be republished."
                      },
                      "status": {
                        "type": "string",
                        "description": "Valid values: \"pending\", \"published\", \"deleted\", \"rejected\""
                      },
                      "priority": {
                        "type": "integer",
                        "description": "Priority value for post."
                      },
                      "recommended": {
                        "type": "boolean",
                        "description": "Whether the post is recommended.(Admin or product account)"
                      }
                    }
                  }
                },
                "required": [
                  "post"
                ]
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/PostsObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "put": {
        "description": "This updates a post.",
        "summary": "Update a post",
        "operationId": "Posts_update",
        "tags": [
          "Posts"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "post": {
                    "type": "object",
                    "properties": {
                      "body": {
                        "type": "string",
                        "description": "The body of the message."
                      },
                      "picture": {
                        "type": "string",
                        "format": "binary",
                        "description": "Post picture, this should be `image/gif`, `image/png`, or `image/jpeg`."
                      },
                      "audio": {
                        "type": "string",
                        "format": "binary",
                        "description": "Post audio, this should be `audio/acc`."
                      },
                      "global": {
                        "type": "boolean",
                        "description": "Whether the post is global (seen by all users)."
                      },
                      "starts_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "When the post should start being visible (same format as in responses)."
                      },
                      "ends_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": " When the post should stop being visible (same format as in responses)."
                      },
                      "repost_interval": {
                        "type": "integer",
                        "description": "How often this post should be republished."
                      },
                      "status": {
                        "type": "string",
                        "description": "Valid values: \"pending\", \"published\", \"deleted\", \"rejected\""
                      },
                      "priority": {
                        "type": "integer",
                        "description": "Priority value for post."
                      },
                      "recommended": {
                        "type": "boolean",
                        "description": "Whether the post is recommended.(Admin or product account)"
                      }
                    }
                  }
                },
                "required": [
                  "post"
                ]
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/PostsObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "delete": {
        "description": "This deletes a single post by marking as deleted. Can only be called by the creator.",
        "summary": "Delete (hide) a single post.",
        "operationId": "Posts_destroy",
        "tags": [
          "Posts"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/posts/{id}/share": {
      "get": {
        "description": "This gets a single post for a post id.",
        "summary": "Get a single, shareable post.",
        "operationId": "Posts_share",
        "tags": [
          "Posts"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the post you want to share.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/PostsShareObject"
          }
        }
      }
    },
    "/posts/{post_id}/comments": {
      "get": {
        "description": "This gets all the non-hidden comments on a post with pagination.",
        "summary": "Get the comments on a post.",
        "operationId": "PostComments_index",
        "tags": [
          "PostComments"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "description": "Post ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/PostCommentsArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "post": {
        "description": "This creates a post comment. It is automatically attributed to the logged in user.",
        "summary": "Create a comment on a post.",
        "operationId": "PostComments_create",
        "tags": [
          "PostComments"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "description": "Post ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "post_comment": {
                    "type": "object",
                    "properties": {
                      "body": {
                        "type": "string",
                        "description": "The body of the comment."
                      }
                    },
                    "required": [
                      "body"
                    ]
                  },
                  "mentions": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "person_id": {
                          "type": "integer",
                          "description": "The id of the person mentioned."
                        },
                        "location": {
                          "type": "integer",
                          "description": "Where the mention text starts in the comment."
                        },
                        "length": {
                          "type": "integer",
                          "description": "The length of the mention text."
                        }
                      },
                      "required": [
                        "person_id",
                        "location",
                        "length"
                      ]
                    }
                  }
                },
                "required": [
                  "post_comment"
                ]
              }
            }
          }
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/PostCommentsObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/posts/{post_id}/comments/{id}": {
      "delete": {
        "description": "This deletes a comment on a post. Can be performed by admin or creator of comment.",
        "summary": "Delete a comment on a post.",
        "operationId": "PostComments_destroy",
        "tags": [
          "PostComments"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "description": "The id of the post to which the comment relates",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/posts/{post_id}/reactions": {
      "post": {
        "description": "This reacts to a post.",
        "summary": "React to a post.",
        "operationId": "PostReactions_create",
        "tags": [
          "PostReactions"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "description": "The id of the post to which you are reacting.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "post_reaction": {
                    "type": "object",
                    "properties": {
                      "reaction": {
                        "type": "string",
                        "description": "The identifier for the reaction. Accepts stringified hex values between 0 and 10FFFF, inclusive."
                      }
                    },
                    "required": [
                      "reaction"
                    ]
                  }
                },
                "required": [
                  "post_reaction"
                ]
              }
            }
          }
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/PostReactionsObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/posts/{post_id}/reactions/{id}": {
      "patch": {
        "description": "This updates a reaction on a post.",
        "summary": "Update a reaction to a post.",
        "operationId": "PostReactions_update",
        "tags": [
          "PostReactions"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "description": "The id of the post to which you are reacting.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "post_reaction": {
                    "type": "object",
                    "properties": {
                      "reaction": {
                        "type": "string",
                        "description": "The identifier for the reaction. Accepts stringified hex values between 0 and 10FFFF, inclusive."
                      }
                    },
                    "required": [
                      "reaction"
                    ]
                  }
                },
                "required": [
                  "post_reaction"
                ]
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/PostReactionsObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "put": {
        "description": "This updates a reaction on a post.",
        "summary": "Update a reaction to a post.",
        "operationId": "PostReactions_update",
        "tags": [
          "PostReactions"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "description": "The id of the post to which you are reacting.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "post_reaction": {
                    "type": "object",
                    "properties": {
                      "reaction": {
                        "type": "string",
                        "description": "The identifier for the reaction. Accepts stringified hex values between 0 and 10FFFF, inclusive."
                      }
                    },
                    "required": [
                      "reaction"
                    ]
                  }
                },
                "required": [
                  "post_reaction"
                ]
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/PostReactionsObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "delete": {
        "description": "This deletes a reaction to a post.",
        "summary": "Delete a reaction to a post.",
        "operationId": "PostReactions_destroy",
        "tags": [
          "PostReactions"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "description": "The id of the post to which you are reacting.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/relationships": {
      "get": {
        "description": "This is used to get a list of someone's friends. If the person supplied is the logged in user, \"requested\" status is included for requests TO the current user. Otherwise, only \"friended\" status is included.",
        "summary": "Get current relationships of a person.",
        "operationId": "Relationships_index",
        "tags": [
          "Relationships"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "person_id",
            "in": "path",
            "required": true,
            "description": "Person whose friends to get",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/RelationshipsObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "post": {
        "description": "This is used to send a friend request to a person. If there is a block between the people, an error will be returned.",
        "summary": "Send a friend request to a person.",
        "operationId": "Relationships_create",
        "tags": [
          "Relationships"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "relationship": {
                    "type": "object",
                    "properties": {
                      "requested_to_id": {
                        "type": "integer",
                        "description": "Person for whom the request is intended"
                      }
                    },
                    "required": [
                      "requested_to_id"
                    ]
                  }
                },
                "required": [
                  "relationship"
                ]
              }
            }
          }
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/RelationshipsArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/relationships/{id}": {
      "get": {
        "description": "This gets a single relationship for a relationship id. Only available to a participating user.",
        "summary": "Get a single relationship.",
        "operationId": "Relationships_show",
        "tags": [
          "Relationships"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/RelationshipsObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "patch": {
        "description": "This is used to accept, deny or unfriend a relationship (friend request).",
        "summary": "Update a relationship.",
        "operationId": "Relationships_update",
        "tags": [
          "Relationships"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "relationship": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "description": "  New status. Valid values are \"friended\", \"denied\" or \"withdrawn\". However each one is only valid in the state and/or from the person that you would expect (e.g. the relationship requester cannot update with \"friended\")."
                      }
                    },
                    "required": [
                      "status"
                    ]
                  }
                },
                "required": [
                  "relationship"
                ]
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/RelationshipsObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "put": {
        "description": "This is used to accept, deny or unfriend a relationship (friend request).",
        "summary": "Update a relationship.",
        "operationId": "Relationships_update",
        "tags": [
          "Relationships"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "relationship": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "description": "  New status. Valid values are \"friended\", \"denied\" or \"withdrawn\". However each one is only valid in the state and/or from the person that you would expect (e.g. the relationship requester cannot update with \"friended\")."
                      }
                    },
                    "required": [
                      "status"
                    ]
                  }
                },
                "required": [
                  "relationship"
                ]
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/RelationshipsObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "delete": {
        "description": "This is used to unfriend a person.",
        "summary": "Unfriend a person.",
        "operationId": "Relationships_destroy",
        "tags": [
          "Relationships"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/rooms": {
      "get": {
        "description": "This gets a list of active rooms (public or private, as specified by the \"private\" parameter).",
        "summary": "Get a list of rooms.",
        "operationId": "Rooms_index",
        "tags": [
          "Rooms"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "private",
            "in": "query",
            "required": false,
            "description": "Which type of room you want. With true you will get just active private rooms of which the current user is a member. With false (the default), you will get just all active public rooms.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/RoomsArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "post": {
        "description": "The creates a private room and makes it active.",
        "summary": "Create a private room.",
        "operationId": "Rooms_create",
        "tags": [
          "Rooms"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "room": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the room. Must be between 3 and 26 characters, inclusive."
                      },
                      "description": {
                        "type": "string",
                        "description": "The description of the room."
                      },
                      "picture": {
                        "type": "string",
                        "format": "binary",
                        "description": "Picture for the room."
                      },
                      "member_ids": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "ids": {
                              "type": "integer",
                              "description": "Ids of persons to add as members. Users who are blocked by or who are blocking the current user will be silently excluded. You do not need to include the current user, who will be made a member automatically."
                            }
                          }
                        }
                      }
                    },
                    "required": [
                      "name"
                    ]
                  }
                },
                "required": [
                  "room"
                ]
              }
            }
          }
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/RoomsObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/rooms/{id}": {
      "patch": {
        "description": "The updates a private room. Only the name can by updated, and only by the owner.",
        "summary": "Update a private room (name).",
        "operationId": "Rooms_update",
        "tags": [
          "Rooms"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "room": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the room. Must be between 3 and 26 characters, inclusive."
                      },
                      "picture": {
                        "type": "string",
                        "format": "binary",
                        "description": "Picture for the room."
                      }
                    },
                    "required": [
                      "name"
                    ]
                  }
                },
                "required": [
                  "room"
                ]
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/RoomsObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "put": {
        "description": "The updates a private room. Only the name can by updated, and only by the owner.",
        "summary": "Update a private room (name).",
        "operationId": "Rooms_update",
        "tags": [
          "Rooms"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "room": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the room. Must be between 3 and 26 characters, inclusive."
                      },
                      "picture": {
                        "type": "string",
                        "format": "binary",
                        "description": "Picture for the room."
                      }
                    },
                    "required": [
                      "name"
                    ]
                  }
                },
                "required": [
                  "room"
                ]
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/RoomsObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "delete": {
        "description": "The deletes a private room. If it has no messages, it deletes it completely. Otherwise, it just changes the status to deleted.",
        "summary": "Delete a private room.",
        "operationId": "Rooms_destroy",
        "tags": [
          "Rooms"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/rooms/{room_id}/message_reports": {
      "post": {
        "description": "This reports a message that was posted to a public room.",
        "summary": "Report a message in a public room.",
        "operationId": "MessageReports_create",
        "tags": [
          "MessageReports"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "room_id",
            "in": "path",
            "required": true,
            "description": "Id of the room in which the message was created.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "message_report": {
                    "type": "object",
                    "properties": {
                      "message_id": {
                        "type": "integer",
                        "description": "The id of the message being reported."
                      },
                      "reason": {
                        "type": "string",
                        "description": "The reason given by the user for reporting the message."
                      }
                    },
                    "required": [
                      "message_id"
                    ]
                  }
                },
                "required": [
                  "message_report"
                ]
              }
            }
          }
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/rooms/{room_id}/messages": {
      "get": {
        "description": "This gets a list of message for a from date, to date, with an optional limit. Messages are returned newest first, and the limit is applied to that ordering.",
        "summary": "Get messages.",
        "operationId": "Messages_index",
        "tags": [
          "Messages"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "room_id",
            "in": "path",
            "required": true,
            "description": "ID of the room the messages belongs to.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "from_date",
            "in": "query",
            "required": false,
            "description": "From date in format \"YYYY-MM-DD\". Note valid dates start from 2017-01-01.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to_date",
            "in": "query",
            "required": false,
            "description": "To date in format \"YYYY-MM-DD\". Note valid dates start from 2017-01-01.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Limit results to count of limit.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/MessagesArray"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "post": {
        "description": "This creates a message in a room and posts it to Firebase as appropriate.",
        "summary": "Create a message in a room.",
        "operationId": "Messages_create",
        "tags": [
          "Messages"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "room_id",
            "in": "path",
            "required": true,
            "description": "ID of the room the message belongs to.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "object",
                    "properties": {
                      "body": {
                        "type": "string",
                        "description": "The body of the message."
                      },
                      "picture": {
                        "type": "string",
                        "format": "binary",
                        "description": "Message picture, this should be `image/gif`, `image/png`, or `image/jpeg`."
                      },
                      "audio": {
                        "type": "string",
                        "format": "binary",
                        "description": "Message audio, this should be `audio/aac`."
                      },
                      "mentions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "person_id": {
                              "type": "integer",
                              "description": "ID of user mentioned"
                            },
                            "location": {
                              "type": "integer",
                              "description": "The location in the message body that the mention is at."
                            },
                            "length": {
                              "type": "integer",
                              "description": "The length of the users name in the mention"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "required": [
                  "message"
                ]
              }
            }
          }
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/MessagesObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/rooms/{room_id}/messages/{id}": {
      "get": {
        "description": "This gets a single message for a message id. Only works for messages in private rooms. If the message author has been blocked by the current user, this will return 404 Not Found.",
        "summary": "Get a single message.",
        "operationId": "Messages_show",
        "tags": [
          "Messages"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "room_id",
            "in": "path",
            "required": true,
            "description": "ID of the room the message belongs to.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/MessagesObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "patch": {
        "description": "This updates a message in a room. Only the hidden field can be changed and only by an admin. If the item is hidden, Firebase will be updated to inform the app that the message has been hidden.",
        "summary": "Update a message",
        "operationId": "Messages_update",
        "tags": [
          "Messages"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "room_id",
            "in": "path",
            "required": true,
            "description": "ID of the room the message belongs to.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "object",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "description": "Whether or not the item is hidden."
                      }
                    }
                  }
                },
                "required": [
                  "message"
                ]
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/MessagesObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "put": {
        "description": "This updates a message in a room. Only the hidden field can be changed and only by an admin. If the item is hidden, Firebase will be updated to inform the app that the message has been hidden.",
        "summary": "Update a message",
        "operationId": "Messages_update",
        "tags": [
          "Messages"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "room_id",
            "in": "path",
            "required": true,
            "description": "ID of the room the message belongs to.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "object",
                    "properties": {
                      "hidden": {
                        "type": "boolean",
                        "description": "Whether or not the item is hidden."
                      }
                    }
                  }
                },
                "required": [
                  "message"
                ]
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/MessagesObject"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      },
      "delete": {
        "description": "This deletes a single message by marking as hidden. Can only be called by the creator.",
        "summary": "Delete (hide) a single message.",
        "operationId": "Messages_destroy",
        "tags": [
          "Messages"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "room_id",
            "in": "path",
            "required": true,
            "description": "ID of the room the message belongs to.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id. If the error says a route is missing, it usually means you forgot the ACCEPT header."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/rooms/{room_id}/room_memberships": {
      "post": {
        "description": "This adds a person to a private room. On success (person added), just returns 200.",
        "summary": "Add a room member.",
        "operationId": "RoomMemberships_create",
        "tags": [
          "RoomMemberships"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "room_id",
            "in": "path",
            "required": true,
            "description": "ID of the room to add the person to.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "person": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "description": "The id of the person."
                      }
                    },
                    "required": [
                      "id"
                    ]
                  }
                },
                "required": [
                  "person"
                ]
              }
            }
          }
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/OK"
          }
        },
        "security": [
          {
            "SessionCookie": [

            ]
          }
        ]
      }
    },
    "/session": {
      "get": {
        "description": "This is used to see if your current session is valid. We return the currently logged-in person if the session is still good and a 404 otherwise.",
        "summary": "Check a session.",
        "operationId": "Session_index",
        "tags": [
          "Session"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SessionObject"
          }
        }
      },
      "post": {
        "description": "This is used to log someone in.",
        "summary": "Log someone in.",
        "operationId": "Session_create",
        "tags": [
          "Session"
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "product": {
                    "type": "string",
                    "description": "Internal name of product logging into."
                  },
                  "email_or_username": {
                    "type": "string",
                    "description": "The person's email address or username. Required unless using Facebook ID."
                  },
                  "facebook_auth_token": {
                    "type": "string",
                    "description": "The facebook auth token. Required unless using username/password."
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "The person's password. Required unless using facebook_auth_token."
                  },
                  "keep": {
                    "type": "boolean",
                    "description": "NOT YET SUPPORTED. True if you want to keep them signed in, otherwise this will be a non-persistent session."
                  }
                },
                "required": [
                  "product",
                  "email_or_username",
                  "facebook_auth_token",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SessionObject"
          }
        }
      },
      "delete": {
        "description": "This is used to log someone out.",
        "summary": "Log someone out.",
        "operationId": "Session_destroy",
        "tags": [
          "Session"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "SessionCookie": {
        "type": "apiKey",
        "name": "_fanlink_session",
        "in": "cookie"
      }
    },
    "schemas": {
      "Badge": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "internal_name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "picture_url": {
            "type": "string"
          },
          "action_requirement": {
            "type": "integer"
          },
          "point_value": {
            "type": "integer"
          }
        },
        "description": "Badge Object"
      },
      "Block": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "blocker_id": {
            "type": "integer"
          },
          "blocked_id": {
            "type": "integer"
          }
        },
        "description": "Block object"
      },
      "Event": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "starts_at": {
            "type": "string",
            "format": "date-time"
          },
          "ends_at": {
            "type": "string",
            "format": "date-time"
          },
          "ticket_url": {
            "type": "string"
          },
          "place_identifier": {
            "type": "string"
          }
        },
        "description": "Event Object"
      },
      "Following": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "follower": {
            "$ref": "#/components/schemas/Person"
          },
          "followed": {
            "$ref": "#/components/schemas/Person"
          }
        },
        "description": "Following Object"
      },
      "Level": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "internal_name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "points": {
            "type": "integer"
          },
          "picture_url": {
            "type": "string"
          }
        },
        "description": "Level Object"
      },
      "Merchandise": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "price": {
            "type": "integer"
          },
          "purchase_url": {
            "type": "string"
          },
          "picture_url": {
            "type": "string"
          },
          "available": {
            "type": "boolean"
          },
          "priority": {
            "type": "integer"
          }
        },
        "description": "Merchandise Object"
      },
      "MessageReport": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "message_id": {
            "type": "integer"
          },
          "poster": {
            "type": "string"
          },
          "reporter": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "description": "Message Report Object"
      },
      "Mention": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "person_id": {
            "type": "integer"
          },
          "location": {
            "type": "integer"
          },
          "length": {
            "type": "integer"
          }
        },
        "description": "Notification Type ID Object"
      },
      "Message": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "body": {
            "type": "string"
          },
          "picture_url": {
            "type": "string"
          },
          "audio_url": {
            "type": "string"
          },
          "audio_size": {
            "type": "string"
          },
          "audio_content_type": {
            "type": "string"
          },
          "person": {
            "$ref": "#/components/schemas/Person"
          },
          "mentions": {
            "$ref": "#/components/schemas/Mention"
          }
        },
        "description": "Message Object"
      },
      "MessageList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "person_id": {
            "type": "integer"
          },
          "room_id": {
            "type": "integer"
          },
          "body": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "picture_url": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Message Object"
      },
      "NotificationDeviceId": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          }
        },
        "description": "Notification Type ID Object"
      },
      "Person": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "username": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "biography": {
            "type": "string"
          },
          "country_code": {
            "type": "string"
          },
          "birthdate": {
            "type": "string"
          },
          "picture_url": {
            "type": "string"
          },
          "product_account": {
            "type": "boolean"
          },
          "recommended": {
            "type": "boolean"
          },
          "chat_banned": {
            "type": "boolean"
          },
          "designation": {
            "type": "string"
          },
          "following_id": {
            "type": "integer"
          },
          "relationships": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "relationship": {
                  "$ref": "#/components/schemas/Relationship"
                }
              }
            }
          },
          "badge_points": {
            "type": "integer"
          },
          "role": {
            "type": "string"
          },
          "level": {
            "type": "string"
          },
          "do_not_message_me": {
            "type": "boolean"
          },
          "pin_messages_from": {
            "type": "boolean"
          },
          "auto_follow": {
            "type": "boolean"
          },
          "num_followers": {
            "type": "integer"
          },
          "num_following": {
            "type": "integer"
          },
          "facebookid": {
            "type": "integer"
          },
          "facebook_picture_url": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Person Object"
      },
      "PersonPrivate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "username": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "biography": {
            "type": "string"
          },
          "country_code": {
            "type": "string"
          },
          "birthdate": {
            "type": "string"
          },
          "picture_url": {
            "type": "string"
          },
          "product_account": {
            "type": "boolean"
          },
          "recommended": {
            "type": "boolean"
          },
          "chat_banned": {
            "type": "boolean"
          },
          "designation": {
            "type": "string"
          },
          "following_id": {
            "type": "integer"
          },
          "relationships": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "relationship": {
                  "$ref": "#/components/schemas/Relationship"
                }
              }
            }
          },
          "badge_points": {
            "type": "integer"
          },
          "role": {
            "type": "string"
          },
          "level": {
            "type": "string"
          },
          "do_not_message_me": {
            "type": "boolean"
          },
          "pin_messages_from": {
            "type": "boolean"
          },
          "auto_follow": {
            "type": "boolean"
          },
          "num_followers": {
            "type": "integer"
          },
          "num_following": {
            "type": "integer"
          },
          "facebookid": {
            "type": "integer"
          },
          "facebook_picture_url": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string"
          },
          "product": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "internal_name": {
                "type": "string"
              }
            }
          }
        },
        "description": "Private Person Object"
      },
      "PostCommentReport": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "post_comment_id": {
            "type": "integer"
          },
          "commenter": {
            "type": "string"
          },
          "reporter": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "description": "Post Comment Report Object"
      },
      "PostComment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "body": {
            "type": "string"
          },
          "mentions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "mention": {
                  "$ref": "#/components/schemas/Mention"
                }
              }
            }
          },
          "person": {
            "$ref": "#/components/schemas/Person"
          }
        },
        "description": "Post Comment Object"
      },
      "PostCommentList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "person_id": {
            "type": "integer"
          },
          "post_id": {
            "type": "integer"
          },
          "body": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "mentions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "mention": {
                  "$ref": "#/components/schemas/Mention"
                }
              }
            }
          }
        },
        "description": "Post Comment Object"
      },
      "PostReaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "post_id": {
            "type": "integer"
          },
          "person_id": {
            "type": "integer"
          },
          "reaction": {
            "type": "string"
          }
        },
        "description": "Post Reaction Object"
      },
      "PostReport": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "post_id": {
            "type": "integer"
          },
          "poster": {
            "type": "string"
          },
          "reporter": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "description": "Post Report Object"
      },
      "Post": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "body": {
            "type": "string"
          },
          "picture_url": {
            "type": "string"
          },
          "audio_url": {
            "type": "string"
          },
          "audio_size": {
            "type": "integer"
          },
          "audio_content_type": {
            "type": "string"
          },
          "person": {
            "$ref": "#/components/schemas/Person"
          },
          "post_reaction_counts": {
            "type": "integer"
          },
          "post_reaction": {
            "$ref": "#/components/schemas/PostReaction"
          },
          "global": {
            "type": "boolean"
          },
          "starts_at": {
            "type": "string",
            "format": "date-time"
          },
          "ends_at": {
            "type": "string",
            "format": "date-time"
          },
          "repost_interval": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "priority": {
            "type": "integer"
          },
          "recommended": {
            "type": "boolean"
          },
          "notify_followers": {
            "type": "boolean"
          },
          "comment_count": {
            "type": "integer"
          },
          "category": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "color": {
                "type": "string"
              },
              "role": {
                "type": "string"
              }
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "tag": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          }
        },
        "description": "Post Object"
      },
      "PostShare": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string"
          },
          "picture_url": {
            "type": "string"
          },
          "person": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "picture_url": {
                "type": "string"
              }
            }
          }
        },
        "description": "Shared Post Object"
      },
      "PostList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "person": {
            "$ref": "#/components/schemas/Person"
          },
          "body": {
            "type": "string"
          },
          "picture_url": {
            "type": "string"
          },
          "global": {
            "type": "boolean"
          },
          "starts_at": {
            "type": "string",
            "format": "date-time"
          },
          "ends_at": {
            "type": "string",
            "format": "date-time"
          },
          "repost_interval": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "priority": {
            "type": "integer"
          },
          "recommended": {
            "type": "boolean"
          },
          "notify_followers": {
            "type": "boolean"
          },
          "comment_count": {
            "type": "integer"
          },
          "category": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "color": {
                "type": "string"
              },
              "role": {
                "type": "string"
              }
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "tag": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          }
        },
        "description": "List Post Object"
      },
      "RecommendedPeople": {
        "$ref": "#/components/schemas/Person"
      },
      "Relationship": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "requested_by": {
            "$ref": "#/components/schemas/Person"
          },
          "requested_to": {
            "$ref": "#/components/schemas/Person"
          }
        },
        "description": "Relationship Object"
      },
      "RoomMembership": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          }
        },
        "description": "Room Membership Object"
      },
      "Room": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "owned": {
            "type": "boolean"
          },
          "picture_url": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "members": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "member": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            }
          }
        },
        "description": "Room Object"
      },
      "Session": {
        "type": "object",
        "properties": {
          "person": {
            "$ref": "#/components/schemas/PersonPrivate"
          }
        },
        "description": "Session Object"
      },
      "Tag": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      }
    },
    "responses": {
      "OK": {
        "description": "HTTP/1.1 200 Ok"
      },
      "PeopleArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "people": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "person": {
                        "$ref": "#/components/schemas/Person"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PersonObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "person": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            }
          }
        }
      },
      "PersonPrivateObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "person": {
                  "$ref": "#/components/schemas/PersonPrivate"
                }
              }
            }
          }
        }
      },
      "PostCommentReportsArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "post_comment_reports": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "post_comment_report": {
                        "$ref": "#/components/schemas/PostCommentReport"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "SessionObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "person": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            }
          }
        }
      },
      "PostCommentsArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "post_comments": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "post_comment": {
                        "$ref": "#/components/schemas/PostComment"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PostCommentsListArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "post_comments": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "post_comment": {
                        "$ref": "#/components/schemas/PostCommentList"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PostCommentsObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "post_comment": {
                  "$ref": "#/components/schemas/PostComment"
                }
              }
            }
          }
        }
      },
      "PostReactionsArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "post_reactions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "post_reaction": {
                        "$ref": "#/components/schemas/PostReaction"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PostReactionsObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "post_reaction": {
                  "$ref": "#/components/schemas/PostReaction"
                }
              }
            }
          }
        }
      },
      "PostReportsObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "post_report": {
                  "$ref": "#/components/schemas/PostReport"
                }
              }
            }
          }
        }
      },
      "PostReportsArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "post_reports": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "post_report": {
                        "$ref": "#/components/schemas/PostReport"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "BadgesArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "badges": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "badge": {
                        "$ref": "#/components/schemas/Badge"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "BlocksObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "block": {
                  "$ref": "#/components/schemas/Block"
                }
              }
            }
          }
        }
      },
      "EventsArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "events": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "event": {
                        "$ref": "#/components/schemas/Event"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "EventsObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "event": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          }
        }
      },
      "PostsArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "posts": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "post": {
                        "$ref": "#/components/schemas/Post"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PostsListsArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "posts": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "post": {
                        "$ref": "#/components/schemas/PostList"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PostsObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "post": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          }
        }
      },
      "PostsShareObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "post": {
                  "$ref": "#/components/schemas/PostShare"
                }
              }
            }
          }
        }
      },
      "FollowingsArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "followings": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "following": {
                        "$ref": "#/components/schemas/Following"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "FollowersArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "followers": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "follower": {
                        "$ref": "#/components/schemas/Following"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "FollowingObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "following": {
                  "$ref": "#/components/schemas/Following"
                }
              }
            }
          }
        }
      },
      "LevelsArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "levels": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "level": {
                        "$ref": "#/components/schemas/Level"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "BadgeActionsPending": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "pending_badge": {
                  "type": "object",
                  "properties": {
                    "badge_action_count": {
                      "type": "integer"
                    },
                    "badge": {
                      "$ref": "#/components/schemas/Badge"
                    }
                  }
                },
                "badges_awarded": {
                  "type": "object",
                  "properties": {
                    "badge": {
                      "$ref": "#/components/schemas/Badge"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "MerchandiseArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "merchandise": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "merchandise": {
                        "$ref": "#/components/schemas/Merchandise"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "MerchandiseObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "merchandise": {
                  "$ref": "#/components/schemas/Merchandise"
                }
              }
            }
          }
        }
      },
      "MessageReportsArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message_reports": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "message_report": {
                        "$ref": "#/components/schemas/MessageReport"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "MessagesArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "messages": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "$ref": "#/components/schemas/Message"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "MessagesObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        }
      },
      "RecommendedPeopleArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "people": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "person": {
                        "$ref": "#/components/schemas/Person"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "RecommendedPostsArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "posts": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "post": {
                        "$ref": "#/components/schemas/Post"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "RelationshipsObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "relationship": {
                  "$ref": "#/components/schemas/Relationship"
                }
              }
            }
          }
        }
      },
      "RelationshipsArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "relationships": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "relationship": {
                        "$ref": "#/components/schemas/Relationship"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "RoomsObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "room": {
                  "$ref": "#/components/schemas/Room"
                }
              }
            }
          }
        }
      },
      "RoomsArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "rooms": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "room": {
                        "$ref": "#/components/schemas/Room"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}