{
  "openapi": "3.0.0",
  "info": {
    "title": "Fanlink API",
    "description": "API documentation of Rails Application. <br/>Optional multiline or single-line Markdown-formatted description in [CommonMark](http://spec.commonmark.org/) or `HTML`.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.fan.link",
      "description": "Production server"
    },
    {
      "url": "http://staging.fan.link",
      "description": "Staging server"
    },
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    }
  ],
  "security": [
    {
      "SessionCookie": [

      ]
    }
  ],
  "tags": [
    {
      "name": "BadgeActions",
      "description": "Badge Actions"
    },
    {
      "name": "Badges",
      "description": "Badges"
    },
    {
      "name": "Base"
    },
    {
      "name": "Blocks",
      "description": "Block a person"
    },
    {
      "name": "Events",
      "description": "Events"
    },
    {
      "name": "Followings",
      "description": "Followers and following"
    },
    {
      "name": "Levels",
      "description": "Levels"
    },
    {
      "name": "Merchandise",
      "description": "Product Merchandise"
    },
    {
      "name": "MessageReports",
      "description": "Message Reports"
    },
    {
      "name": "Messages",
      "description": "Messages"
    },
    {
      "name": "NotificationDeviceIds",
      "description": "Notification Device IDs"
    },
    {
      "name": "People",
      "description": "Users"
    },
    {
      "name": "PostCommentReports",
      "description": "Reported comments on posts"
    },
    {
      "name": "PostComments",
      "description": "Comments on a post"
    },
    {
      "name": "PostReactions",
      "description": "User reactions to a post"
    },
    {
      "name": "PostReports",
      "description": "Posts reported by a user"
    },
    {
      "name": "Posts",
      "description": "User/product posts"
    },
    {
      "name": "RecommendedPeople",
      "description": "Recommended People"
    },
    {
      "name": "RecommendedPosts",
      "description": "Recommended posts"
    },
    {
      "name": "Relationships",
      "description": "User's relationships"
    },
    {
      "name": "RoomMemberships",
      "description": "What rooms a user belongs to."
    },
    {
      "name": "Rooms",
      "description": "Chat rooms"
    },
    {
      "name": "Session",
      "description": "User session management."
    }
  ],
  "paths": {
    "/badge_actions": {
      "post": {
        "summary": "POST create a badge action",
        "operationId": "BadgeActions_create",
        "tags": [
          "BadgeActions"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "badge_action": {
                    "type": "object",
                    "properties": {
                      "action_type": {
                        "type": "string",
                        "description": "Internal name of the action type."
                      },
                      "indentifier": {
                        "type": "string",
                        "description": "The indentifier for this badge action."
                      }
                    },
                    "required": [
                      "action_type"
                    ]
                  }
                },
                "required": [
                  "badge_action"
                ]
              }
            }
          }
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/BadgeActionsAwarded"
          },
          "429": {
            "description": "Not enough time since last submission of this action type or duplicate action type, person, identifier combination"
          }
        }
      }
    },
    "/badges": {
      "get": {
        "summary": "Get badges",
        "operationId": "Badges_index",
        "tags": [
          "Badges"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "person_id",
            "in": "query",
            "required": false,
            "description": "The id of the person whose badges you want.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/BadgesArray"
          }
        }
      }
    },
    "/blocks": {
      "post": {
        "description": "This is used to block a person. When a person is blocked, any followings and relationships are immediately removed between the users.",
        "summary": "POST Block a person",
        "operationId": "Blocks_create",
        "tags": [
          "Blocks"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "block": {
                    "type": "object",
                    "properties": {
                      "blocked_id": {
                        "type": "integer",
                        "description": "Internal name of the action type."
                      }
                    },
                    "required": [
                      "blocked_id"
                    ]
                  }
                },
                "required": [
                  "block"
                ]
              }
            }
          }
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/BlocksObject"
          }
        }
      }
    },
    "/blocks/{id}": {
      "delete": {
        "summary": "POST Unblock a person",
        "operationId": "Blocks_destroy",
        "tags": [
          "Blocks"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id."
          },
          "200": {
            "$ref": "#/components/responses/Delete"
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          }
        }
      }
    },
    "/events": {
      "get": {
        "summary": "Get all events for a product",
        "operationId": "Events_index",
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "from_date",
            "in": "query",
            "required": false,
            "description": "Only include events starting on or after date in format \"YYYY-MM-DD\". Note valid dates start from 2017-01-01.",
            "schema": {
              "type": "date"
            }
          },
          {
            "name": "to_date",
            "in": "query",
            "required": false,
            "description": "Only include events starting on or before date in format \"YYYY-MM-DD\". Note valid dates start from 2017-01-01.",
            "schema": {
              "type": "date"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/EventsArray"
          }
        }
      }
    },
    "/events/{id}": {
      "get": {
        "summary": "Get a single event by id",
        "operationId": "Events_show",
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/EventsObject"
          }
        }
      }
    },
    "/followings": {
      "get": {
        "description": "This is used to get a list of someone's followers or followed. If followed_id parameter is supplied, it will get the follower's of that user. If follower_id is supplied, it will get the people that person is following. If nothing is supplied it will get the people the current user is following.",
        "summary": "Get followers or followings of a user.",
        "operationId": "Followings_index",
        "tags": [
          "Followings"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          },
          {
            "name": "followed_id",
            "in": "query",
            "required": false,
            "description": "Person to who's followers to get.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "follower_id",
            "in": "query",
            "required": false,
            "description": "Id of person who is following the people in the list we are getting.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/FollowersArray"
          }
        }
      },
      "post": {
        "description": "This is used to follow a person.",
        "summary": "Follow a person.",
        "operationId": "Followings_create",
        "tags": [
          "Followings"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "followed_id": {
                    "type": "integer",
                    "description": "Person to follow."
                  }
                },
                "required": [
                  "followed_id"
                ]
              }
            }
          }
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/FollowingObject"
          }
        }
      }
    },
    "/followings/{id}": {
      "delete": {
        "description": "This is used to unfollow a person.",
        "summary": "Unfollow a person.",
        "operationId": "Followings_destroy",
        "tags": [
          "Followings"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id."
          },
          "200": {
            "$ref": "#/components/responses/Delete"
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          }
        }
      }
    },
    "/levels": {
      "get": {
        "description": "This gets a list of all levels available to be obtained.",
        "summary": "Get all available levels.",
        "operationId": "Levels_index",
        "tags": [
          "Levels"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          },
          "200": {
            "$ref": "#/components/responses/LevelsArray"
          }
        }
      }
    },
    "/merchandise": {
      "get": {
        "description": " This gets a list of merchandise, in priority order.",
        "summary": "Get available merchandise.",
        "operationId": "Merchandise_index",
        "tags": [
          "Merchandise"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MerchandiseArray"
          }
        }
      }
    },
    "/merchandise/{id}": {
      "get": {
        "description": "This gets a single piece of merchandise for a merchandise id.",
        "summary": "Get a single piece of merchandise.",
        "operationId": "Merchandise_show",
        "tags": [
          "Merchandise"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MerchandiseObject"
          }
        }
      }
    },
    "/message_reports": {
      "get": {
        "operationId": "MessageReports_index",
        "tags": [
          "MessageReports"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page, greater than 1",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "data count per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 25
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          }
        }
      }
    },
    "/message_reports/{id}": {
      "patch": {
        "operationId": "MessageReports_update",
        "tags": [
          "MessageReports"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          }
        }
      },
      "put": {
        "operationId": "MessageReports_update",
        "tags": [
          "MessageReports"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found. The database doesn't contain a record for that id."
          },
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          }
        }
      }
    },
    "/rooms/{room_id}/message_reports": {
      "post": {
        "description": "This reports a message that was posted to a public room.",
        "summary": "Report a message in a public room.",
        "operationId": "MessageReports_create",
        "tags": [
          "MessageReports"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "description": "application/vnd.api.v1+json",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "422": {
            "description": "Unprocessable Entity. Usually occurs when a field is invalid or missing."
          },
          "401": {
            "description": "Unauthorized. "
          },
          "500": {
            "description": "Internal Server Error. Server threw an unrecoverable error. Create a ticket with any form fields you we're trying to send, the URL, API version number and any steps you took so that it can be replicated."
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "SessionCookie": {
        "type": "apiKey",
        "name": "_fanlink_session",
        "in": "cookie"
      }
    },
    "schemas": {
      "Badge": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "internal_name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "picture_url": {
            "type": "string"
          },
          "action_requirement": {
            "type": "integer"
          },
          "point_value": {
            "type": "integer"
          }
        },
        "description": "Badge Object"
      },
      "Block": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "blocker_id": {
            "type": "integer"
          },
          "blocked_id": {
            "type": "integer"
          }
        },
        "description": "Block object"
      },
      "Event": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "starts_at": {
            "type": "string",
            "format": "date-time"
          },
          "ends_at": {
            "type": "string",
            "format": "date-time"
          },
          "ticket_url": {
            "type": "string"
          },
          "place_identifier": {
            "type": "string"
          }
        },
        "description": "Event Object"
      },
      "Following": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "follower": {
            "$ref": "#/components/schemas/Person"
          },
          "followed": {
            "$ref": "#/components/schemas/Person"
          }
        },
        "description": "Following Object"
      },
      "Level": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "internal_name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "points": {
            "type": "integer"
          },
          "picture_url": {
            "type": "string"
          }
        },
        "description": "Level Object"
      },
      "Merchandise": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "price": {
            "type": "integer"
          },
          "purchase_url": {
            "type": "string"
          },
          "picture_url": {
            "type": "string"
          },
          "available": {
            "type": "boolean"
          },
          "priority": {
            "type": "integer"
          }
        },
        "description": "Merchandise Object"
      },
      "MessageReport": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "message_id": {
            "type": "integer"
          },
          "poster": {
            "type": "string"
          },
          "reporter": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "description": "Message Report Object"
      },
      "Mention": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "person_id": {
            "type": "integer"
          },
          "location": {
            "type": "integer"
          },
          "length": {
            "type": "integer"
          }
        },
        "description": "Notification Type ID Object"
      },
      "Message": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "body": {
            "type": "string"
          },
          "picture_url": {
            "type": "string"
          },
          "audio_url": {
            "type": "string"
          },
          "audio_size": {
            "type": "string"
          },
          "audio_content_type": {
            "type": "string"
          },
          "person": {
            "$ref": "#/components/schemas/Person"
          },
          "mentions": {
            "$ref": "#/components/schemas/Mention"
          }
        },
        "description": "Message Object"
      },
      "MessageList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "person_id": {
            "type": "integer"
          },
          "room_id": {
            "type": "integer"
          },
          "body": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "picture_url": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Message Object"
      },
      "NotificationDeviceId": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          }
        },
        "description": "Notification Type ID Object"
      },
      "Person": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "username": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "biography": {
            "type": "string"
          },
          "country_code": {
            "type": "string"
          },
          "birthdate": {
            "type": "string"
          },
          "picture_url": {
            "type": "string"
          },
          "product_account": {
            "type": "boolean"
          },
          "recommended": {
            "type": "boolean"
          },
          "chat_banned": {
            "type": "boolean"
          },
          "designation": {
            "type": "string"
          },
          "following_id": {
            "type": "integer"
          },
          "relationships": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "relationship": {
                  "$ref": "#/components/schemas/Relationship"
                }
              }
            }
          },
          "badge_points": {
            "type": "integer"
          },
          "role": {
            "type": "string"
          },
          "level": {
            "type": "string"
          },
          "do_not_message_me": {
            "type": "boolean"
          },
          "pin_messages_from": {
            "type": "boolean"
          },
          "auto_follow": {
            "type": "boolean"
          },
          "num_followers": {
            "type": "integer"
          },
          "num_following": {
            "type": "integer"
          },
          "facebookid": {
            "type": "integer"
          },
          "facebook_picture_url": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Person Object"
      },
      "PersonPrivate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "username": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "biography": {
            "type": "string"
          },
          "country_code": {
            "type": "string"
          },
          "birthdate": {
            "type": "string"
          },
          "picture_url": {
            "type": "string"
          },
          "product_account": {
            "type": "boolean"
          },
          "recommended": {
            "type": "boolean"
          },
          "chat_banned": {
            "type": "boolean"
          },
          "designation": {
            "type": "string"
          },
          "following_id": {
            "type": "integer"
          },
          "relationships": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "relationship": {
                  "$ref": "#/components/schemas/Relationship"
                }
              }
            }
          },
          "badge_points": {
            "type": "integer"
          },
          "role": {
            "type": "string"
          },
          "level": {
            "type": "string"
          },
          "do_not_message_me": {
            "type": "boolean"
          },
          "pin_messages_from": {
            "type": "boolean"
          },
          "auto_follow": {
            "type": "boolean"
          },
          "num_followers": {
            "type": "integer"
          },
          "num_following": {
            "type": "integer"
          },
          "facebookid": {
            "type": "integer"
          },
          "facebook_picture_url": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string"
          },
          "product": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "internal_name": {
                "type": "string"
              }
            }
          }
        },
        "description": "Private Person Object"
      },
      "PostCommentReport": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "post_comment_id": {
            "type": "integer"
          },
          "commenter": {
            "type": "string"
          },
          "reporter": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "description": "Post Comment Report Object"
      },
      "PostComment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "body": {
            "type": "string"
          },
          "mentions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "mention": {
                  "$ref": "#/components/schemas/Mention"
                }
              }
            }
          },
          "person": {
            "$ref": "#/components/schemas/Person"
          }
        },
        "description": "Post Comment Object"
      },
      "PostCommentList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "person_id": {
            "type": "integer"
          },
          "post_id": {
            "type": "integer"
          },
          "body": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "mentions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "mention": {
                  "$ref": "#/components/schemas/Mention"
                }
              }
            }
          }
        },
        "description": "Post Comment Object"
      },
      "PostReaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "post_id": {
            "type": "integer"
          },
          "person_id": {
            "type": "integer"
          },
          "reaction": {
            "type": "string"
          }
        },
        "description": "Post Reaction Object"
      },
      "PostReport": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "post_id": {
            "type": "integer"
          },
          "poster": {
            "type": "string"
          },
          "reporter": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "description": "Post Report Object"
      },
      "Post": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "body": {
            "type": "string"
          },
          "picture_url": {
            "type": "string"
          },
          "audio_url": {
            "type": "string"
          },
          "audio_size": {
            "type": "integer"
          },
          "audio_content_type": {
            "type": "string"
          },
          "person": {
            "$ref": "#/components/schemas/Person"
          },
          "post_reaction_counts": {
            "type": "integer"
          },
          "post_reaction": {
            "$ref": "#/components/schemas/PostReaction"
          },
          "global": {
            "type": "boolean"
          },
          "starts_at": {
            "type": "string",
            "format": "date-time"
          },
          "ends_at": {
            "type": "string",
            "format": "date-time"
          },
          "repost_interval": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "priority": {
            "type": "integer"
          },
          "recommended": {
            "type": "boolean"
          },
          "notify_followers": {
            "type": "boolean"
          },
          "comment_count": {
            "type": "integer"
          },
          "category": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "color": {
                "type": "string"
              },
              "role": {
                "type": "string"
              }
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "tag": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          }
        },
        "description": "Post Object"
      },
      "PostList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "person": {
            "$ref": "#/components/schemas/Person"
          },
          "body": {
            "type": "string"
          },
          "picture_url": {
            "type": "string"
          },
          "global": {
            "type": "boolean"
          },
          "starts_at": {
            "type": "string",
            "format": "date-time"
          },
          "ends_at": {
            "type": "string",
            "format": "date-time"
          },
          "repost_interval": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "priority": {
            "type": "integer"
          },
          "recommended": {
            "type": "boolean"
          },
          "notify_followers": {
            "type": "boolean"
          },
          "comment_count": {
            "type": "integer"
          },
          "category": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "color": {
                "type": "string"
              },
              "role": {
                "type": "string"
              }
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "tag": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          }
        },
        "description": "List Post Object"
      },
      "Relationship": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "create_time": {
            "type": "string",
            "format": "date-time"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "requested_by": {
            "$ref": "#/components/schemas/Person"
          },
          "requested_to": {
            "$ref": "#/components/schemas/Person"
          }
        },
        "description": "Relationship Object"
      },
      "RoomMembership": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          }
        },
        "description": "Room Membership Object"
      },
      "Room": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "owned": {
            "type": "boolean"
          },
          "picture_url": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "members": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "member": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            }
          }
        },
        "description": "Room Object"
      },
      "Session": {
        "type": "object",
        "properties": {
          "person": {
            "$ref": "#/components/schemas/PersonPrivate"
          }
        },
        "description": "Session Object"
      },
      "Tag": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      }
    },
    "responses": {
      "NotificationDeviceIds200": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "PasswordResets200": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "PostCommentReportsArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "post_comment_reports": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "post_comment_report": {
                        "$ref": "#/components/schemas/PostCommentReport"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PostCommentsArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "PostCommentsListArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "PostCommentsObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "PostReactions200": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "PostReports200": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "Posts200": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "RecommendedPeople200": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "RecommendedPosts200": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "Relationships200": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "RoomMemberships200": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "Rooms200": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "Session200": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "Delete": {
        "description": "HTTP/1.1 200 Ok"
      },
      "BadgeActionsPending": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "pending_badge": {
                  "type": "object",
                  "properties": {
                    "badge_action_count": {
                      "type": "integer"
                    },
                    "badge": {
                      "$ref": "#/components/schemas/Badge"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "BadgeActionsAwarded": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "badges_awarded": {
                  "type": "object",
                  "properties": {
                    "badge": {
                      "$ref": "#/components/schemas/Badge"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "BadgesArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "badges": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "badge": {
                        "$ref": "#/components/schemas/Badge"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "BlocksObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "block": {
                  "$ref": "#/components/schemas/Block"
                }
              }
            }
          }
        }
      },
      "FollowingsArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "followings": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "following": {
                        "$ref": "#/components/schemas/Following"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "FollowersArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "followers": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "follower": {
                        "$ref": "#/components/schemas/Following"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "FollowingObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "following": {
                  "$ref": "#/components/schemas/Following"
                }
              }
            }
          }
        }
      },
      "LevelsArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "levels": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "level": {
                        "$ref": "#/components/schemas/Level"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "MerchandiseArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "merchandise": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "merchandise": {
                        "$ref": "#/components/schemas/Merchandise"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "MerchandiseObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "merchandise": {
                  "$ref": "#/components/schemas/Merchandise"
                }
              }
            }
          }
        }
      },
      "MessageReportsArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message_reports": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "message_report": {
                        "$ref": "#/components/schemas/MessageReport"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "EventsArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "events": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "event": {
                        "$ref": "#/components/schemas/Event"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "EventsObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "event": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          }
        }
      },
      "PeopleArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "people": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "person": {
                        "$ref": "#/components/schemas/Person"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PersonObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "person": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            }
          }
        }
      },
      "PersonPrivateObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "person": {
                  "$ref": "#/components/schemas/PersonPrivate"
                }
              }
            }
          }
        }
      },
      "MessagesArray": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "messages": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "$ref": "#/components/schemas/Message"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "MessagesObject": {
        "description": "HTTP/1.1 200 Ok",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        }
      }
    }
  }
}