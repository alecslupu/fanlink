json = {}
json[:posts] = @posts.map do |post|
  p = Rails.cache.fetch ["v4", "post", @req_source, post.id, post.updated_at.to_i] do
    render partial: @req_source, locals: { post: post,  post_reaction: @post_reactions[post.id] }
  end
  if defined?(@post_reactions[post.id]) && @post_reactions[post.id].present?
    p[:post_reaction] =
    {
      id: @post_reactions[post.id].id,
      post_id: @post_reactions[post.id].post_id,
      person_id: @post_reactions[post.id].person_id,
      reaction: @post_reactions[post.id].reaction
    }
  else
    p[:post_reaction] = nil
  end
  if @device.to_s == "ios"
    p[:post_reaction_counts] = post.reaction_breakdown.to_json
  else
    p[:post_reaction_counts] = post.reaction_breakdown
  end
  if post.poll.present?
    p[:poll] = Rails.cache.fetch ["v4", "poll", @req_source, post.poll.id, post.poll.updated_at.to_i] do
      render(partial: "api/v4/polls/#{@req_source}", locals: { poll: post.poll }, handlers: "jb")
    end
    p[:poll][:closed] = post.poll.closed?
    if post.poll.poll_options.present?
      p[:poll][:poll_options] = post.poll.poll_options.map do |option|
        po = Rails.cache.fetch ["v4", "poll_options", @req_source, option.id, option.updated_at.to_i] do
          render(partial: "api/v4/poll_options/#{@req_source}", locals: { option: option }, handlers: "jb")
        end
        po[:numberOfVotes] = option.votes
        po[:voted] = option.voted?(current_user)
        po
      end
    end
  end
  p
end

json[:total] = @posts.size
json

# {
#   posts: render(partial: @req_source, collection: @posts, as: :post)
# }
