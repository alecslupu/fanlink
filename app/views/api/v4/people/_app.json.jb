# frozen_string_literal: true
progress = person.level_progresses
level = person.level_earned_from_progresses(progress)
json = {
  id: person.id.to_s,
  username: person.username,
  name: person.name,
  email: person.email,
  gender: person.gender,
  city: person.city,
  country_code: person.country_code,
  birthdate: person.birthdate,
  biography: person.biography,
  picture_url: (person.picture_url.presence || person.facebook_picture_url.presence),
  product_account: person.product_account,
  recommended: person.recommended,
  chat_banned: person.chat_banned,
  tester: person.tester,
  terminated: person.terminated,
  terminated_reason: person.terminated_reason,
  designation: person.designation,
  role: person.role.to_s,
  do_not_message_me: person.do_not_message_me,
  pin_messages_from: person.pin_messages_from,
  auto_follow: person.auto_follow,
  num_followers: person.followers.size,
  num_following: person.following.size,
  facebookid: person.facebookid,
  facebook_picture_url: person.facebook_picture_url,
  badge_points: (progress.present? ? progress.first.total : 0),
  level: (level.nil? ? nil : render(partial: "api/v4/levels/#{@req_source}", locals: { level: level }, handlers: "jb")),
  created_at: person.created_at.to_s,
  updated_at: person.updated_at.to_s
}

if fol = current_user && current_user.following_for_person(person)
  json[:following_id] = fol.id
else
  json[:following_id] = nil
end

if defined?(relationships) && relationships.present?
  json[:relationships] = render(partial: "api/v4/relationships/#{@req_source}", collection: relationships, as: :relationship)
end

json
