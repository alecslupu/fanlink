stages:
  - deploy
  - build
  - test
  - rspec
  - report

.base_minimal:
  image: alpine:latest
  cache: {}
  tags:
    - anything


.base:
  image: ruby:2.5.1
  cache:
    key: gems_and_packages
    paths:
      - apt-cache/
      - vendor/ruby
      - vendor/bundle
  before_script:
    - gem install bundler -v $BUNDLER_VERSION
    - bundle --version && bundle install --jobs $(nproc) "${FLAGS[@]}" --path=vendor
  tags:
    - anything

.base_db:
  extends: .base
  tags:
    - anything
  services:
    - postgres:latest
  variables:
    RAILS_ENV: test
    FANLINK_PG_USER: $POSTGRES_USER
    FANLINK_PG_PASSWORD: $POSTGRES_PASSWORD
    FANLINK_PG_HOST: $POSTGRES_HOST
    FANLINK_PG_DATABASE: $POSTGRES_DB
    POSTGRES_USER: $POSTGRES_USER
    POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    POSTGRES_DB: $POSTGRES_DB
  before_script:
    - gem install bundler -v $BUNDLER_VERSION
    - bundle install --jobs $(nproc) "${FLAGS[@]}" --path=vendor
    - export APT_CACHE_DIR=`pwd`/apt-cache && mkdir -pv $APT_CACHE_DIR
    - apt-get update -qq && apt-get -o dir::cache::archives="$APT_CACHE_DIR" install -yqq nodejs
    - bundle exec rake db:reset
    - bundle exec rake db:setup
    - bundle exec rake db:test:prepare


build:initial:
  extends: .base
  stage: build
  script:
    - echo "main"

test:rubocop:
  extends: .base
  stage: test
  allow_failure: true
  artifacts:
    name: rubocop
    when: always
    paths:
      - rubocop/
  script:
    - bundle exec rubocop --format html --out rubocop/index.html


build:assets_precompile:
  extends: .base_db
  stage: build
  script:
    - bundle exec rake assets:precompile

test:bundle_audit:
  extends: .base
  stage: test
  allow_failure: true
  script:
    - gem install bundler-audit
    - bundle-audit check --update

test:rubycritic:
  stage: test
  extends: .base
  allow_failure: true
  script:
    - bundle exec rubycritic app config
  artifacts:
    name: rubycritic
    when: always
    paths:
      - tmp/rubycritic/

test:brakeman:
  extends: .base
  stage: test
  allow_failure: true
  artifacts:
    name: brakeman_report
    when: always
    paths:
      - brakeman/
  script:
    - bundle exec brakeman --format html -o brakeman/index.html

test:dawnscanner:
  extends: .base
  stage: test
  allow_failure: true
  artifacts:
    name: dawnscanner_report
    when: always
    paths:
      - dawnscanner
  script:
    - gem install dawnscanner
    - mkdir dawnscanner
    - dawn --html -zF dawnscanner/index.html .

test:erd:
  extends: .base_db
  stage: test
  allow_failure: true
  artifacts:
    name: erd
    paths:
      - erd.pdf
  script:
    - apt-get -o dir::cache::archives="$APT_CACHE_DIR" install -y -qq graphviz
    - gem install 'rails-erd'
    - bundle exec rails g erd:install
    - bundle exec rake erd

.test:rspec51:
  extends: .base_db
  stage: rspec
  artifacts:
    name: coverage_report51
    paths:
      - coverage51/
  script:
    - bundle exec rspec spec --fail-fast --exclude-pattern "spec/requests/**/*_spec.rb"
    - mv coverage coverage51

.test:rspec52:
  extends: .base_db
  stage: rspec
  allow_failure: true
  variables:
    RAILS_ENV: test
  artifacts:
    name: coverage_report52
    paths:
      - coverage52/
  script:
    - export RAILS52=true
    - bundle update rails
    - bundle install
    - bundle exec rspec spec --fail-fast --exclude-pattern "spec/requests/**/*_spec.rb"
    - mv coverage coverage52

.test:rspec6:
  extends: .base_db
  stage: rspec
  allow_failure: true
  artifacts:
    name: coverage_report6
    paths:
      - coverage6/
  script:
    - export RAILS6=true
    - bundle update rails
    - bundle install
    - bundle exec rspec spec --fail-fast --exclude-pattern "spec/requests/**/*_spec.rb"
    - mv coverage coverage6


pages:
  extends: .base_minimal
  stage: report
  allow_failure: true
  dependencies:
    - test:brakeman
    - test:dawnscanner
    - test:erd
    - test:rubycritic
    - test:rubocop
  artifacts:
    name: my_app_artifacts
    paths:
      - public/brakeman
      - public/coverage51
      - public/coverage52
      - public/coverage6
      - public/dawnscanner
      - public/rubocop
      - public/erd.pdf
      - public/rubycritic
  only:
    - master
  script:
    - mv brakeman public/ || true
    - mv dawnscanner public/ || true
    - mv erd.pdf public/ || true
    - mv tmp/rubycritic public/ || true
    - mv rubocop public/ || true
    - mv coverage51 public/ || true
    - mv coverage52 public/ || true
    - mv coverage6 public/ || true


deploy:staging:
  extends: .base
  stage: deploy
  when: manual
  artifacts:
    name: "$CI_JOB_NAME-capistrano-log"
    when: on_failure
    paths:
      - log/capistrano.log
  variables:
    RAILS_ENV: development
  tags:
    - anything
    - deploy
  environment:
    name: staging
    url: https://staging.fan.link
  only:
    - staging
    - ale-staging
  script:
    - mkdir ~/.ssh/
    - cp $SSH_PRIVATE_KEY ~/.ssh/id_rsa
    - chmod 400 ~/.ssh/id_rsa
    - which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )
    - eval $(ssh-agent -s)
    - ssh-add
    - ssh-add -l

deploy:production:
  extends: .base
  stage: deploy
  when: manual
  variables:
    RAILS_ENV: development
  tags:
    - anything
    - deploy
  environment:
    name: production
    url: https://fan.link
  only:
    - master
  script:
    - echo "Deploying to Production..."


